// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map.Entry;

import org.hibernate.Query;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.DBModule;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.QueryUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.AuthenticationTypeVO;
import org.phoenixctms.ctsms.vo.CriteriaInstantVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.UserInVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.UserSettingsInVO;
import org.phoenixctms.ctsms.vocycle.DeferredVO;
import org.phoenixctms.ctsms.vocycle.UserReflexionGraph;
import org.springframework.dao.DataAccessResourceFailureException;

/**
 * @see User
 */
public class UserDaoImpl
		extends UserDaoBase {

	private org.hibernate.Criteria createUserCriteria() {
		org.hibernate.Criteria userCriteria = this.getSession().createCriteria(User.class);
		return userCriteria;
	}

	/**
	 * @throws Exception
	 * @throws IllegalStateException
	 * @throws DataAccessResourceFailureException
	 * @inheritDoc
	 */
	@Override
	protected Collection<User> handleFindByCriteria(CriteriaInstantVO criteria, PSFVO psf) throws Exception {
		Query query = QueryUtil.createSearchQuery(
				criteria,
				DBModule.USER_DB,
				psf,
				this.getSessionFactory(),
				this.getCriterionTieDao(),
				this.getCriterionPropertyDao(),
				this.getCriterionRestrictionDao());
		return query.list();
	}

	@Override
	protected Collection<User> handleFindByIdDepartment(Long userId,
			Long departmentId, PSFVO psf) throws Exception {
		org.hibernate.Criteria userCriteria = createUserCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(User.class, userCriteria);
		CriteriaUtil.applyIdDepartmentCriterion(userCriteria, userId, departmentId);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return userCriteria.list();
	}

	/**
	 * @throws Exception
	 * @inheritDoc
	 */
	@Override
	protected Collection<User> handleFindByIdentity(Long identityId, PSFVO psf) throws Exception {
		org.hibernate.Criteria userCriteria = createUserCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(User.class, userCriteria);
		if (identityId != null) {
			userCriteria.add(Restrictions.eq("identity.id", identityId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return userCriteria.list();
	}

	@Override
	protected long handleGetCountByCriteria(CriteriaInstantVO criteria, PSFVO psf) throws Exception {
		return QueryUtil.getSearchQueryResultCount(
				criteria,
				DBModule.USER_DB,
				psf,
				this.getSessionFactory(),
				this.getCriterionTieDao(),
				this.getCriterionPropertyDao(),
				this.getCriterionRestrictionDao());
	}

	private void loadDeferredStaffOutVOs(HashMap<Class, HashMap<Long, Object>> voMap) {
		HashMap<Long, Object> identityVOMap = voMap.get(StaffOutVO.class);
		StaffDao staffDao = this.getStaffDao();
		if (identityVOMap != null) {
			Iterator<Entry<Long, Object>> identityVOMapIt = (new HashSet<Entry<Long, Object>>(identityVOMap.entrySet())).iterator();
			while (identityVOMapIt.hasNext()) {
				Entry<Long, Object> identityVO = identityVOMapIt.next();
				DeferredVO deferredVO = (DeferredVO) identityVO.getValue();
				if (deferredVO.isDeferred()) {
					deferredVO.setDeferred(false);
					staffDao.toStaffOutVO(staffDao.load(identityVO.getKey()), (StaffOutVO) deferredVO.getVo(), voMap, identityVOMap.size(), 0, 0);
				}
			}
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private User loadUserFromUserInVO(UserInVO userInVO) {
		User user = null;
		Long id = userInVO.getId();
		if (id != null) {
			user = this.load(id);
		}
		if (user == null) {
			user = User.Factory.newInstance();
		}
		return user;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private User loadUserFromUserOutVO(UserOutVO userOutVO) {
		throw new UnsupportedOperationException("out value object to recursive entity not supported");
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public UserInVO toUserInVO(final User entity) {
		return super.toUserInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toUserInVO(
			User source,
			UserInVO target) {
		super.toUserInVO(source, target);
		Department department = source.getDepartment();
		Staff identity = source.getIdentity();
		if (department != null) {
			target.setDepartmentId(department.getId());
		}
		if (identity != null) {
			target.setIdentityId(identity.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public UserOutVO toUserOutVO(final User entity) {
		return super.toUserOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toUserOutVO(
			User source,
			UserOutVO target) {
		HashMap<Class, HashMap<Long, Object>> voMap = new HashMap<Class, HashMap<Long, Object>>();
		(new UserReflexionGraph(this, this.getDepartmentDao())).toVOHelper(source, target, voMap);
		loadDeferredStaffOutVOs(voMap);
	}

	@Override
	public void toUserOutVO(
			User source,
			UserOutVO target, HashMap<Class, HashMap<Long, Object>> voMap) {
		(new UserReflexionGraph(this, this.getDepartmentDao())).toVOHelper(source, target, voMap);
		loadDeferredStaffOutVOs(voMap);
	}

	@Override
	public void toUserOutVO(
			User source,
			UserOutVO target, HashMap<Class, HashMap<Long, Object>> voMap, Integer... maxInstances) {
		(new UserReflexionGraph(this, this.getDepartmentDao(), maxInstances)).toVOHelper(source, target, voMap);
		loadDeferredStaffOutVOs(voMap);
	}

	@Override
	public void toUserOutVO(
			User source,
			UserOutVO target, Integer... maxInstances) {
		HashMap<Class, HashMap<Long, Object>> voMap = new HashMap<Class, HashMap<Long, Object>>();
		(new UserReflexionGraph(this, this.getDepartmentDao(), maxInstances)).toVOHelper(source, target, voMap);
		loadDeferredStaffOutVOs(voMap);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public User userInVOToEntity(UserInVO userInVO) {
		User entity = this.loadUserFromUserInVO(userInVO);
		this.userInVOToEntity(userInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void userInVOToEntity(
			UserInVO source,
			User target,
			boolean copyIfNull) {
		super.userInVOToEntity(source, target, copyIfNull);
		Long departmentId = source.getDepartmentId();
		Long identityId = source.getIdentityId();
		if (departmentId != null) {
			Department department = this.getDepartmentDao().load(departmentId);
			target.setDepartment(department);
			department.addUsers(target);
		} else if (copyIfNull) {
			Department department = target.getDepartment();
			target.setDepartment(null);
			if (department != null) {
				department.removeUsers(target);
			}
		}
		if (identityId != null) {
			Staff identity = this.getStaffDao().load(identityId);
			target.setIdentity(identity);
			identity.addAccounts(target);
		} else if (copyIfNull) {
			Staff identity = target.getIdentity();
			target.setIdentity(null);
			if (identity != null) {
				identity.removeAccounts(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public User userOutVOToEntity(UserOutVO userOutVO) {
		User entity = this.loadUserFromUserOutVO(userOutVO);
		this.userOutVOToEntity(userOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void userOutVOToEntity(
			UserOutVO source,
			User target,
			boolean copyIfNull) {
		super.userOutVOToEntity(source, target, copyIfNull);
		StaffOutVO identityVO = source.getIdentity();
		AuthenticationTypeVO authMethodVO = source.getAuthMethod();
		if (identityVO != null) {
			Staff identity = this.getStaffDao().staffOutVOToEntity(identityVO);
			target.setIdentity(identity);
			identity.addAccounts(target);
		} else if (copyIfNull) {
			Staff identity = target.getIdentity();
			target.setIdentity(null);
			if (identity != null) {
				identity.removeAccounts(target);
			}
		}
		if (authMethodVO != null) {
			target.setAuthMethod(authMethodVO.getMethod());
		} else if (copyIfNull) {
			target.setAuthMethod(null);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	public void toUserSettingsInVO(
			User source,
			UserSettingsInVO target) {
		super.toUserSettingsInVO(source, target);
	}

	/**
	 * {@inheritDoc}
	 */
	public UserSettingsInVO toUserSettingsInVO(final User entity) {
		return super.toUserSettingsInVO(entity);
	}

	/**
	 * {@inheritDoc}
	 */
	public User userSettingsInVOToEntity(UserSettingsInVO userSettingsInVO) {
		User entity = this.loadUserFromUserSettingsInVO(userSettingsInVO);
		this.userSettingsInVOToEntity(userSettingsInVO, entity, true);
		return entity;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void userSettingsInVOToEntity(
			UserSettingsInVO source,
			User target,
			boolean copyIfNull) {
		super.userSettingsInVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private User loadUserFromUserSettingsInVO(UserSettingsInVO userSettingsInVO) {
		User user = null;
		Long id = userSettingsInVO.getId();
		if (id != null) {
			user = this.load(id);
		}
		if (user == null) {
			user = User.Factory.newInstance();
		}
		return user;
	}
}