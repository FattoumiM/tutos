// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.security.CipherText;
import org.phoenixctms.ctsms.security.CryptoUtil;
import org.phoenixctms.ctsms.security.reencrypt.FieldReEncrypter;
import org.phoenixctms.ctsms.security.reencrypt.ReEncrypter;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandOutVO;
import org.phoenixctms.ctsms.vo.ProbandTagVO;
import org.phoenixctms.ctsms.vo.ProbandTagValueInVO;
import org.phoenixctms.ctsms.vo.ProbandTagValueOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see ProbandTagValue
 */
public class ProbandTagValueDaoImpl
		extends ProbandTagValueDaoBase {

	private final static Collection<ReEncrypter<ProbandTagValue>> RE_ENCRYPTERS = new ArrayList<ReEncrypter<ProbandTagValue>>();
	static {
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandTagValue>() {

			@Override
			protected byte[] getIv(ProbandTagValue item) {
				return item.getValueIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandTagValue item) {
				return item.getEncryptedValue();
			}

			@Override
			protected void setIv(ProbandTagValue item, byte[] iv) {
				item.setValueIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandTagValue item, byte[] cipherText) {
				item.setEncryptedValue(cipherText);
			}

			@Override
			protected void setHash(ProbandTagValue item, byte[] hash) {
				item.setValueHash(hash);
			}
		});
	}

	@Override
	protected Collection<ReEncrypter<ProbandTagValue>> getReEncrypters() {
		return RE_ENCRYPTERS;
	}

	private org.hibernate.Criteria createTagValueCriteria() {
		org.hibernate.Criteria tagValueCriteria = this.getSession().createCriteria(ProbandTagValue.class);
		return tagValueCriteria;
	}

	/**
	 * @throws Exception
	 * @inheritDoc
	 */
	@Override
	protected Collection<ProbandTagValue> handleFindByProband(Long probandId, PSFVO psf) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ProbandTagValue.class, tagValueCriteria);
		if (probandId != null) {
			tagValueCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return tagValueCriteria.list();
	}

	@Override
	protected long handleGetCount(
			Long probandId) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		if (probandId != null) {
			tagValueCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		return (Long) tagValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandTagValue loadProbandTagValueFromProbandTagValueInVO(ProbandTagValueInVO probandTagValueInVO) {
		ProbandTagValue probandTagValue = null;
		Long id = probandTagValueInVO.getId();
		if (id != null) {
			probandTagValue = this.load(id);
		}
		if (probandTagValue == null) {
			probandTagValue = ProbandTagValue.Factory.newInstance();
		}
		return probandTagValue;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandTagValue loadProbandTagValueFromProbandTagValueOutVO(ProbandTagValueOutVO probandTagValueOutVO) {
		ProbandTagValue probandTagValue = this.load(probandTagValueOutVO.getId());
		if (probandTagValue == null) {
			probandTagValue = ProbandTagValue.Factory.newInstance();
		}
		return probandTagValue;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandTagValue probandTagValueInVOToEntity(ProbandTagValueInVO probandTagValueInVO) {
		ProbandTagValue entity = this.loadProbandTagValueFromProbandTagValueInVO(probandTagValueInVO);
		this.probandTagValueInVOToEntity(probandTagValueInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandTagValueInVOToEntity(
			ProbandTagValueInVO source,
			ProbandTagValue target,
			boolean copyIfNull) {
		super.probandTagValueInVOToEntity(source, target, copyIfNull);
		Long tagId = source.getTagId();
		Long probandId = source.getProbandId();
		if (tagId != null) {
			target.setTag(this.getProbandTagDao().load(tagId));
		} else if (copyIfNull) {
			target.setTag(null);
		}
		if (probandId != null) {
			Proband proband = this.getProbandDao().load(probandId);
			target.setProband(proband);
			proband.addTagValues(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeTagValues(target);
			}
		}
		try {
			if (copyIfNull || source.getValue() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getValue());
				target.setValueIv(cipherText.getIv());
				target.setEncryptedValue(cipherText.getCipherText());
				target.setValueHash(CryptoUtil.hashForSearch(source.getValue()));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandTagValue probandTagValueOutVOToEntity(ProbandTagValueOutVO probandTagValueOutVO) {
		ProbandTagValue entity = this.loadProbandTagValueFromProbandTagValueOutVO(probandTagValueOutVO);
		this.probandTagValueOutVOToEntity(probandTagValueOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandTagValueOutVOToEntity(
			ProbandTagValueOutVO source,
			ProbandTagValue target,
			boolean copyIfNull) {
		super.probandTagValueOutVOToEntity(source, target, copyIfNull);
		ProbandTagVO tagVO = source.getTag();
		ProbandOutVO probandVO = source.getProband();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (tagVO != null) {
			target.setTag(this.getProbandTagDao().probandTagVOToEntity(tagVO));
		} else if (copyIfNull) {
			target.setTag(null);
		}
		if (probandVO != null) {
			Proband proband = this.getProbandDao().probandOutVOToEntity(probandVO);
			target.setProband(proband);
			proband.addTagValues(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeTagValues(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		try {
			if (copyIfNull || source.getValue() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getValue());
				target.setValueIv(cipherText.getIv());
				target.setEncryptedValue(cipherText.getCipherText());
				target.setValueHash(CryptoUtil.hashForSearch(source.getValue()));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandTagValueInVO toProbandTagValueInVO(final ProbandTagValue entity) {
		return super.toProbandTagValueInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandTagValueInVO(
			ProbandTagValue source,
			ProbandTagValueInVO target) {
		super.toProbandTagValueInVO(source, target);
		ProbandTag tag = source.getTag();
		Proband proband = source.getProband();
		if (tag != null) {
			target.setTagId(tag.getId());
		}
		if (proband != null) {
			target.setProbandId(proband.getId());
		}
		try {
			target.setValue((String) CryptoUtil.decryptValue(source.getValueIv(), source.getEncryptedValue()));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandTagValueOutVO toProbandTagValueOutVO(final ProbandTagValue entity) {
		return super.toProbandTagValueOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandTagValueOutVO(
			ProbandTagValue source,
			ProbandTagValueOutVO target) {
		super.toProbandTagValueOutVO(source, target);
		ProbandTag tag = source.getTag();
		Proband proband = source.getProband();
		User modifiedUser = source.getModifiedUser();
		if (tag != null) {
			target.setTag(this.getProbandTagDao().toProbandTagVO(tag));
		}
		if (proband != null) {
			target.setProband(this.getProbandDao().toProbandOutVO(proband));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		try {
			if (!CoreUtil.isPassDecryption()) {
				throw new Exception();
			}
			target.setValue((String) CryptoUtil.decryptValue(source.getValueIv(), source.getEncryptedValue()));
			target.setDecrypted(true);
		} catch (Exception e) {
			target.setValue(null);
			target.setDecrypted(false);
		}
	}
}