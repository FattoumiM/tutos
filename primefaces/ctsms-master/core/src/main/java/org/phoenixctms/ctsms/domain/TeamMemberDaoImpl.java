// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.TeamMemberInVO;
import org.phoenixctms.ctsms.vo.TeamMemberOutVO;
import org.phoenixctms.ctsms.vo.TeamMemberRoleVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see TeamMember
 */
public class TeamMemberDaoImpl
		extends TeamMemberDaoBase {

	private org.hibernate.Criteria createTeamMemberCriteria() {
		org.hibernate.Criteria teamMemberCriteria = this.getSession().createCriteria(TeamMember.class);
		return teamMemberCriteria;
	}

	@Override
	protected Collection<TeamMember> handleFindByTrialStaffRole(Long trialId, Long staffId,
			Long roleId, Boolean allocatable, PSFVO psf) throws Exception {
		org.hibernate.Criteria teamMemberCriteria = createTeamMemberCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(TeamMember.class, teamMemberCriteria);
		if (trialId != null) {
			teamMemberCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (staffId != null) {
			teamMemberCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (allocatable != null) {
			org.hibernate.Criteria staffCriteria = teamMemberCriteria.createCriteria("staff");
			staffCriteria.add(Restrictions.eq("allocatable", allocatable.booleanValue()));
		}
		if (roleId != null) {
			teamMemberCriteria.add(Restrictions.eq("role.id", roleId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return teamMemberCriteria.list();
	}

	@Override
	protected long handleGetCount(Long trialId, Long staffId,
			Long roleId, Boolean allocatable) throws Exception {
		org.hibernate.Criteria teamMemberCriteria = createTeamMemberCriteria();
		if (trialId != null) {
			teamMemberCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (staffId != null) {
			teamMemberCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (allocatable != null) {
			org.hibernate.Criteria staffCriteria = teamMemberCriteria.createCriteria("staff");
			staffCriteria.add(Restrictions.eq("allocatable", allocatable.booleanValue()));
		}
		if (roleId != null) {
			teamMemberCriteria.add(Restrictions.eq("role.id", roleId.longValue()));
		}
		return (Long) teamMemberCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private TeamMember loadTeamMemberFromTeamMemberInVO(TeamMemberInVO teamMemberInVO) {
		TeamMember teamMember = null;
		Long id = teamMemberInVO.getId();
		if (id != null) {
			teamMember = this.load(id);
		}
		if (teamMember == null) {
			teamMember = TeamMember.Factory.newInstance();
		}
		return teamMember;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private TeamMember loadTeamMemberFromTeamMemberOutVO(TeamMemberOutVO teamMemberOutVO) {
		TeamMember teamMember = this.load(teamMemberOutVO.getId());
		if (teamMember == null) {
			teamMember = TeamMember.Factory.newInstance();
		}
		return teamMember;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TeamMember teamMemberInVOToEntity(TeamMemberInVO teamMemberInVO) {
		TeamMember entity = this.loadTeamMemberFromTeamMemberInVO(teamMemberInVO);
		this.teamMemberInVOToEntity(teamMemberInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void teamMemberInVOToEntity(
			TeamMemberInVO source,
			TeamMember target,
			boolean copyIfNull) {
		super.teamMemberInVOToEntity(source, target, copyIfNull);
		Long trialId = source.getTrialId();
		Long staffId = source.getStaffId();
		Long roleId = source.getRoleId();
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addMembers(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeMembers(target);
			}
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addTrialMemberships(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeTrialMemberships(target);
			}
		}
		if (roleId != null) {
			target.setRole(this.getTeamMemberRoleDao().load(roleId));
		} else if (copyIfNull) {
			target.setRole(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TeamMember teamMemberOutVOToEntity(TeamMemberOutVO teamMemberOutVO) {
		TeamMember entity = this.loadTeamMemberFromTeamMemberOutVO(teamMemberOutVO);
		this.teamMemberOutVOToEntity(teamMemberOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void teamMemberOutVOToEntity(
			TeamMemberOutVO source,
			TeamMember target,
			boolean copyIfNull) {
		super.teamMemberOutVOToEntity(source, target, copyIfNull);
		TrialOutVO trialVO = source.getTrial();
		StaffOutVO staffVO = source.getStaff();
		TeamMemberRoleVO roleVO = source.getRole();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addMembers(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeMembers(target);
			}
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addTrialMemberships(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeTrialMemberships(target);
			}
		}
		if (roleVO != null) {
			target.setRole(this.getTeamMemberRoleDao().teamMemberRoleVOToEntity(roleVO));
		} else if (copyIfNull) {
			target.setRole(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TeamMemberInVO toTeamMemberInVO(final TeamMember entity) {
		return super.toTeamMemberInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toTeamMemberInVO(
			TeamMember source,
			TeamMemberInVO target) {
		super.toTeamMemberInVO(source, target);
		Trial trial = source.getTrial();
		Staff staff = source.getStaff();
		TeamMemberRole role = source.getRole();
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
		if (role != null) {
			target.setRoleId(role.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TeamMemberOutVO toTeamMemberOutVO(final TeamMember entity) {
		return super.toTeamMemberOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toTeamMemberOutVO(
			TeamMember source,
			TeamMemberOutVO target) {
		super.toTeamMemberOutVO(source, target);
		Trial trial = source.getTrial();
		Staff staff = source.getStaff();
		TeamMemberRole role = source.getRole();
		User modifiedUser = source.getModifiedUser();
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (role != null) {
			target.setRole(this.getTeamMemberRoleDao().toTeamMemberRoleVO(role));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}
}