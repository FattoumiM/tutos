// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.JournalModule;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.JournalCategoryVO;

/**
 * @see JournalCategory
 */
public class JournalCategoryDaoImpl
		extends JournalCategoryDaoBase {

	private org.hibernate.Criteria createCategoryCriteria() {
		org.hibernate.Criteria categoryCriteria = this.getSession().createCriteria(JournalCategory.class);
		categoryCriteria.setCacheable(true);
		return categoryCriteria;
	}

	@Override
	protected Collection<JournalCategory> handleFindByModuleVisibleId(
			JournalModule module, Boolean visible, Long categoryId) throws Exception {
		org.hibernate.Criteria categoryCriteria = createCategoryCriteria();
		if (module != null) {
			categoryCriteria.add(Restrictions.eq("module", module));
		}
		CriteriaUtil.applyVisibleIdCriterion("visible", categoryCriteria, visible, categoryId);
		return categoryCriteria.list();
	}

	@Override
	protected JournalCategory handleFindPreset(JournalModule module)
			throws Exception {
		org.hibernate.Criteria categoryCriteria = createCategoryCriteria();
		if (module != null) {
			categoryCriteria.add(Restrictions.eq("module", module));
		}
		categoryCriteria.add(Restrictions.eq("visible", true));
		categoryCriteria.add(Restrictions.eq("preset", true));
		categoryCriteria.setMaxResults(1);
		return (JournalCategory) categoryCriteria.uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public JournalCategory journalCategoryVOToEntity(JournalCategoryVO journalCategoryVO) {
		JournalCategory entity = this.loadJournalCategoryFromJournalCategoryVO(journalCategoryVO);
		this.journalCategoryVOToEntity(journalCategoryVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void journalCategoryVOToEntity(
			JournalCategoryVO source,
			JournalCategory target,
			boolean copyIfNull) {
		super.journalCategoryVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private JournalCategory loadJournalCategoryFromJournalCategoryVO(JournalCategoryVO journalCategoryVO) {
		JournalCategory journalCategory = null;
		Long id = journalCategoryVO.getId();
		if (id != null) {
			journalCategory = this.load(id);
		}
		if (journalCategory == null) {
			journalCategory = JournalCategory.Factory.newInstance();
		}
		return journalCategory;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public JournalCategoryVO toJournalCategoryVO(final JournalCategory entity) {
		return super.toJournalCategoryVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toJournalCategoryVO(
			JournalCategory source,
			JournalCategoryVO target) {
		super.toJournalCategoryVO(source, target);
		target.setName(L10nUtil.getJournalCategoryName(Locales.USER, source.getNameL10nKey()));
		target.setTitlePreset(L10nUtil.getJournalTitlePreset(Locales.USER, source.getTitlePresetL10nKey()));
	}
}