// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.vo.AddressTypeVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffAddressInVO;
import org.phoenixctms.ctsms.vo.StaffAddressOutVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see StaffAddress
 */
public class StaffAddressDaoImpl
		extends StaffAddressDaoBase {

	private static String getAddressString(StaffAddressOutVO address) {
		StringBuilder sb = new StringBuilder();
		if (address != null) {
			StringBuilder zc = new StringBuilder();
			sb.append(CommonUtil.getStreetString(address.getStreetName(), address.getHouseNumber(), address.getEntrance(), address.getDoorNumber()));
			CommonUtil.appendString(zc, address.getZipCode(), null, "?");
			CommonUtil.appendString(zc, address.getCityName(), " ", "?");
			CommonUtil.appendString(sb, zc.toString(), " - ");
		}
		return sb.toString();
	}

	private static String getCivicString(StaffAddressOutVO address) {
		StringBuilder sb = new StringBuilder();
		if (address != null) {
			StringBuilder zc = new StringBuilder();
			sb.append(CommonUtil.getStreetString(address.getStreetName(), address.getHouseNumber(), null, null));
			CommonUtil.appendString(zc, address.getZipCode(), null, "?");
			CommonUtil.appendString(zc, address.getCityName(), " ", "?");
			CommonUtil.appendString(sb, zc.toString(), ", ");
		}
		return sb.toString();
	}

	private org.hibernate.Criteria createAddressCriteria() {
		org.hibernate.Criteria addressCriteria = this.getSession().createCriteria(StaffAddress.class);
		return addressCriteria;
	}

	@Override
	protected Collection<StaffAddress> handleFindByStaff(Long staffId, Boolean cv, Boolean deliver, Boolean afnus, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria staffAddressCriteria = createAddressCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(StaffAddress.class, staffAddressCriteria);
		if (staffId != null) {
			staffAddressCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (cv != null) {
			staffAddressCriteria.add(Restrictions.eq("cv", cv.booleanValue()));
		}
		if (deliver != null) {
			staffAddressCriteria.add(Restrictions.eq("deliver", deliver.booleanValue()));
		}
		if (afnus != null) {
			staffAddressCriteria.add(Restrictions.eq("afnus", afnus.booleanValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return staffAddressCriteria.list();
	}

	@Override
	protected long handleGetCount(Long staffId, Boolean cv, Boolean deliver, Boolean afnus) throws Exception {
		org.hibernate.Criteria staffAddressCriteria = createAddressCriteria();
		if (staffId != null) {
			staffAddressCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (cv != null) {
			staffAddressCriteria.add(Restrictions.eq("cv", cv.booleanValue()));
		}
		if (deliver != null) {
			staffAddressCriteria.add(Restrictions.eq("deliver", deliver.booleanValue()));
		}
		if (afnus != null) {
			staffAddressCriteria.add(Restrictions.eq("afnus", afnus.booleanValue()));
		}
		return (Long) staffAddressCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private StaffAddress loadStaffAddressFromStaffAddressInVO(StaffAddressInVO staffAddressInVO) {
		StaffAddress staffAddress = null;
		Long id = staffAddressInVO.getId();
		if (id != null) {
			staffAddress = this.load(id);
		}
		if (staffAddress == null) {
			staffAddress = StaffAddress.Factory.newInstance();
		}
		return staffAddress;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private StaffAddress loadStaffAddressFromStaffAddressOutVO(StaffAddressOutVO staffAddressOutVO) {
		StaffAddress staffAddress = this.load(staffAddressOutVO.getId());
		if (staffAddress == null) {
			staffAddress = StaffAddress.Factory.newInstance();
		}
		return staffAddress;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffAddress staffAddressInVOToEntity(StaffAddressInVO staffAddressInVO) {
		StaffAddress entity = this.loadStaffAddressFromStaffAddressInVO(staffAddressInVO);
		this.staffAddressInVOToEntity(staffAddressInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void staffAddressInVOToEntity(
			StaffAddressInVO source,
			StaffAddress target,
			boolean copyIfNull) {
		super.staffAddressInVOToEntity(source, target, copyIfNull);
		Long typeId = source.getTypeId();
		Long staffId = source.getStaffId();
		if (typeId != null) {
			target.setType(this.getAddressTypeDao().load(typeId));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addAddresses(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeAddresses(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffAddress staffAddressOutVOToEntity(StaffAddressOutVO staffAddressOutVO) {
		StaffAddress entity = this.loadStaffAddressFromStaffAddressOutVO(staffAddressOutVO);
		this.staffAddressOutVOToEntity(staffAddressOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void staffAddressOutVOToEntity(
			StaffAddressOutVO source,
			StaffAddress target,
			boolean copyIfNull) {
		super.staffAddressOutVOToEntity(source, target, copyIfNull);
		AddressTypeVO typeVO = source.getType();
		StaffOutVO staffVO = source.getStaff();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (typeVO != null) {
			target.setType(this.getAddressTypeDao().addressTypeVOToEntity(typeVO));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addAddresses(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeAddresses(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffAddressInVO toStaffAddressInVO(final StaffAddress entity) {
		return super.toStaffAddressInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toStaffAddressInVO(
			StaffAddress source,
			StaffAddressInVO target) {
		super.toStaffAddressInVO(source, target);
		AddressType type = source.getType();
		Staff staff = source.getStaff();
		if (type != null) {
			target.setTypeId(type.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffAddressOutVO toStaffAddressOutVO(final StaffAddress entity) {
		return super.toStaffAddressOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toStaffAddressOutVO(
			StaffAddress source,
			StaffAddressOutVO target) {
		super.toStaffAddressOutVO(source, target);
		AddressType type = source.getType();
		Staff staff = source.getStaff();
		User modifiedUser = source.getModifiedUser();
		if (type != null) {
			target.setType(this.getAddressTypeDao().toAddressTypeVO(type));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setName(getAddressString(target));
		target.setCivicName(getCivicString(target));
	}
}