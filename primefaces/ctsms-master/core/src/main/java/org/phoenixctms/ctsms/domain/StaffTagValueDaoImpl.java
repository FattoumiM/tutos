// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.StaffTagVO;
import org.phoenixctms.ctsms.vo.StaffTagValueInVO;
import org.phoenixctms.ctsms.vo.StaffTagValueOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see StaffTagValue
 */
public class StaffTagValueDaoImpl
		extends StaffTagValueDaoBase {

	private org.hibernate.Criteria createTagValueCriteria() {
		org.hibernate.Criteria tagValueCriteria = this.getSession().createCriteria(StaffTagValue.class);
		return tagValueCriteria;
	}

	@Override
	protected Collection<StaffTagValue> handleFindByStaff(Long staffId,
			PSFVO psf) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(StaffTagValue.class, tagValueCriteria);
		if (staffId != null) {
			tagValueCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return tagValueCriteria.list();
	}

	@Override
	protected Collection<TrialTagValue> handleFindByStaffExcelTrainingRecordSorted(Long staffId,
			Boolean excel, Boolean trainingRecord) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		tagValueCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		Criteria tagCriteria = tagValueCriteria.createCriteria("tag", CriteriaSpecification.INNER_JOIN);
		if (excel != null) {
			tagCriteria.add(Restrictions.eq("excel", excel.booleanValue()));
		}
		if (trainingRecord != null) {
			tagCriteria.add(Restrictions.eq("trainingRecord", trainingRecord.booleanValue()));
		}
		tagCriteria.addOrder(Order.asc("nameL10nKey"));
		return tagValueCriteria.list();
	}

	@Override
	protected long handleGetCount(
			Long staffId) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		if (staffId != null) {
			tagValueCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		return (Long) tagValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private StaffTagValue loadStaffTagValueFromStaffTagValueInVO(StaffTagValueInVO staffTagValueInVO) {
		StaffTagValue staffTagValue = null;
		Long id = staffTagValueInVO.getId();
		if (id != null) {
			staffTagValue = this.load(id);
		}
		if (staffTagValue == null) {
			staffTagValue = StaffTagValue.Factory.newInstance();
		}
		return staffTagValue;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private StaffTagValue loadStaffTagValueFromStaffTagValueOutVO(StaffTagValueOutVO staffTagValueOutVO) {
		StaffTagValue staffTagValue = this.load(staffTagValueOutVO.getId());
		if (staffTagValue == null) {
			staffTagValue = StaffTagValue.Factory.newInstance();
		}
		return staffTagValue;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffTagValue staffTagValueInVOToEntity(StaffTagValueInVO staffTagValueInVO) {
		StaffTagValue entity = this.loadStaffTagValueFromStaffTagValueInVO(staffTagValueInVO);
		this.staffTagValueInVOToEntity(staffTagValueInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void staffTagValueInVOToEntity(
			StaffTagValueInVO source,
			StaffTagValue target,
			boolean copyIfNull) {
		super.staffTagValueInVOToEntity(source, target, copyIfNull);
		Long tagId = source.getTagId();
		Long staffId = source.getStaffId();
		if (tagId != null) {
			target.setTag(this.getStaffTagDao().load(tagId));
		} else if (copyIfNull) {
			target.setTag(null);
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addTagValues(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeTagValues(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffTagValue staffTagValueOutVOToEntity(StaffTagValueOutVO staffTagValueOutVO) {
		StaffTagValue entity = this.loadStaffTagValueFromStaffTagValueOutVO(staffTagValueOutVO);
		this.staffTagValueOutVOToEntity(staffTagValueOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void staffTagValueOutVOToEntity(
			StaffTagValueOutVO source,
			StaffTagValue target,
			boolean copyIfNull) {
		super.staffTagValueOutVOToEntity(source, target, copyIfNull);
		StaffTagVO tagVO = source.getTag();
		StaffOutVO staffVO = source.getStaff();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (tagVO != null) {
			target.setTag(this.getStaffTagDao().staffTagVOToEntity(tagVO));
		} else if (copyIfNull) {
			target.setTag(null);
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addTagValues(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeTagValues(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffTagValueInVO toStaffTagValueInVO(final StaffTagValue entity) {
		return super.toStaffTagValueInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toStaffTagValueInVO(
			StaffTagValue source,
			StaffTagValueInVO target) {
		super.toStaffTagValueInVO(source, target);
		StaffTag tag = source.getTag();
		Staff staff = source.getStaff();
		if (tag != null) {
			target.setTagId(tag.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffTagValueOutVO toStaffTagValueOutVO(final StaffTagValue entity) {
		return super.toStaffTagValueOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toStaffTagValueOutVO(
			StaffTagValue source,
			StaffTagValueOutVO target) {
		super.toStaffTagValueOutVO(source, target);
		StaffTag tag = source.getTag();
		Staff staff = source.getStaff();
		User modifiedUser = source.getModifiedUser();
		if (tag != null) {
			target.setTag(this.getStaffTagDao().toStaffTagVO(tag));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}
}