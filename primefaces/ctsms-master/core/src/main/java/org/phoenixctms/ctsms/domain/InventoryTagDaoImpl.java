// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;

import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.InventoryTagVO;

/**
 * @see InventoryTag
 */
public class InventoryTagDaoImpl
		extends InventoryTagDaoBase {

	@Override
	protected Collection<InventoryTag> handleFindByVisibleIdExcel(Boolean visible, Long tagId, Boolean excel)
			throws Exception {
		org.hibernate.Criteria tagCriteria = this.getSession().createCriteria(InventoryTag.class);
		tagCriteria.setCacheable(true);
		if (excel != null) {
			tagCriteria.add(Restrictions.eq("excel", excel.booleanValue()));
		}
		CriteriaUtil.applyVisibleIdCriterion("visible", tagCriteria, visible, tagId);
		return tagCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InventoryTag inventoryTagVOToEntity(InventoryTagVO inventoryTagVO) {
		InventoryTag entity = this.loadInventoryTagFromInventoryTagVO(inventoryTagVO);
		this.inventoryTagVOToEntity(inventoryTagVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inventoryTagVOToEntity(
			InventoryTagVO source,
			InventoryTag target,
			boolean copyIfNull) {
		super.inventoryTagVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InventoryTag loadInventoryTagFromInventoryTagVO(InventoryTagVO inventoryTagVO) {
		InventoryTag inventoryTag = null;
		Long id = inventoryTagVO.getId();
		if (id != null) {
			inventoryTag = this.load(id);
		}
		if (inventoryTag == null) {
			inventoryTag = InventoryTag.Factory.newInstance();
		}
		return inventoryTag;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InventoryTagVO toInventoryTagVO(final InventoryTag entity) {
		return super.toInventoryTagVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInventoryTagVO(
			InventoryTag source,
			InventoryTagVO target) {
		super.toInventoryTagVO(source, target);
		target.setName(L10nUtil.getInventoryTagName(Locales.USER, source.getNameL10nKey()));
	}
}