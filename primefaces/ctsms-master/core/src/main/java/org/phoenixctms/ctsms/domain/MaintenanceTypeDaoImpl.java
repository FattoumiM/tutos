// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.MaintenanceTypeVO;

/**
 * @see MaintenanceType
 */
public class MaintenanceTypeDaoImpl
		extends MaintenanceTypeDaoBase {

	@Override
	protected Collection<MaintenanceType> handleFindByVisibleId(Boolean visible, Long typeId)
			throws Exception {
		org.hibernate.Criteria typeCriteria = this.getSession().createCriteria(MaintenanceType.class);
		typeCriteria.setCacheable(true);
		CriteriaUtil.applyVisibleIdCriterion("visible", typeCriteria, visible, typeId);
		return typeCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private MaintenanceType loadMaintenanceTypeFromMaintenanceTypeVO(MaintenanceTypeVO maintenanceTypeVO) {
		MaintenanceType maintenanceType = null;
		Long id = maintenanceTypeVO.getId();
		if (id != null) {
			maintenanceType = this.load(id);
		}
		if (maintenanceType == null) {
			maintenanceType = MaintenanceType.Factory.newInstance();
		}
		return maintenanceType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public MaintenanceType maintenanceTypeVOToEntity(MaintenanceTypeVO maintenanceTypeVO) {
		MaintenanceType entity = this.loadMaintenanceTypeFromMaintenanceTypeVO(maintenanceTypeVO);
		this.maintenanceTypeVOToEntity(maintenanceTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void maintenanceTypeVOToEntity(
			MaintenanceTypeVO source,
			MaintenanceType target,
			boolean copyIfNull) {
		super.maintenanceTypeVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public MaintenanceTypeVO toMaintenanceTypeVO(final MaintenanceType entity) {
		return super.toMaintenanceTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toMaintenanceTypeVO(
			MaintenanceType source,
			MaintenanceTypeVO target) {
		super.toMaintenanceTypeVO(source, target);
		target.setName(L10nUtil.getMaintenanceTypeName(Locales.USER, source.getNameL10nKey()));
		target.setTitlePreset(L10nUtil.getMaintenanceTitlePreset(Locales.USER, source.getTitlePresetL10nKey()));
	}
}