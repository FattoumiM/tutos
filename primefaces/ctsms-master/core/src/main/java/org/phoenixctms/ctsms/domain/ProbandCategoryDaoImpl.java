// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.ProbandCategoryVO;

/**
 * @see ProbandCategory
 */
public class ProbandCategoryDaoImpl
		extends ProbandCategoryDaoBase {

	private org.hibernate.Criteria createCategoryCriteria() {
		org.hibernate.Criteria categoryCriteria = this.getSession().createCriteria(ProbandCategory.class);
		categoryCriteria.setCacheable(true);
		return categoryCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<ProbandCategory> handleFindByPersonAnimalId(Boolean person, Boolean animal, Long categoryId) {
		org.hibernate.Criteria categoryCriteria = createCategoryCriteria();
		if (person != null) {
			if (categoryId != null) {
				categoryCriteria.add(Restrictions.or(Restrictions.eq("person", person.booleanValue()), Restrictions.idEq(categoryId.longValue())));
			} else {
				categoryCriteria.add(Restrictions.eq("person", person.booleanValue()));
			}
		}
		if (animal != null) {
			if (categoryId != null) {
				categoryCriteria.add(Restrictions.or(Restrictions.eq("animal", animal.booleanValue()), Restrictions.idEq(categoryId.longValue())));
			} else {
				categoryCriteria.add(Restrictions.eq("animal", animal.booleanValue()));
			}
		}
		return categoryCriteria.list();
	}

	@Override
	protected ProbandCategory handleFindPreset(boolean signup, boolean person) throws Exception {
		org.hibernate.Criteria categoryCriteria = createCategoryCriteria();
		categoryCriteria.add(Restrictions.eq("signup", signup));
		categoryCriteria.add(Restrictions.eq("preset", true));
		if (person) {
			categoryCriteria.add(Restrictions.eq("person", true));
		} else {
			categoryCriteria.add(Restrictions.eq("animal", true));
		}
		categoryCriteria.setMaxResults(1);
		return (ProbandCategory) categoryCriteria.uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandCategory loadProbandCategoryFromProbandCategoryVO(ProbandCategoryVO probandCategoryVO) {
		ProbandCategory probandCategory = null;
		Long id = probandCategoryVO.getId();
		if (id != null) {
			probandCategory = this.load(id);
		}
		if (probandCategory == null) {
			probandCategory = ProbandCategory.Factory.newInstance();
		}
		return probandCategory;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandCategory probandCategoryVOToEntity(ProbandCategoryVO probandCategoryVO) {
		ProbandCategory entity = this.loadProbandCategoryFromProbandCategoryVO(probandCategoryVO);
		this.probandCategoryVOToEntity(probandCategoryVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandCategoryVOToEntity(
			ProbandCategoryVO source,
			ProbandCategory target,
			boolean copyIfNull) {
		super.probandCategoryVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandCategoryVO toProbandCategoryVO(final ProbandCategory entity) {
		return super.toProbandCategoryVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandCategoryVO(
			ProbandCategory source,
			ProbandCategoryVO target) {
		super.toProbandCategoryVO(source, target);
		target.setName(L10nUtil.getProbandCategoryName(Locales.USER, source.getNameL10nKey()));
	}
}