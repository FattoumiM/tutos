// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.ProbandStatusTypeVO;

/**
 * @see ProbandStatusType
 */
public class ProbandStatusTypeDaoImpl
		extends ProbandStatusTypeDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<ProbandStatusType> handleFindByPersonAnimalId(Boolean person, Boolean animal, Long typeId) {
		org.hibernate.Criteria statusTypeCriteria = this.getSession().createCriteria(ProbandStatusType.class);
		statusTypeCriteria.setCacheable(true);
		if (person != null) {
			if (typeId != null) {
				statusTypeCriteria.add(Restrictions.or(Restrictions.eq("person", person.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				statusTypeCriteria.add(Restrictions.eq("person", person.booleanValue()));
			}
		}
		if (animal != null) {
			if (typeId != null) {
				statusTypeCriteria.add(Restrictions.or(Restrictions.eq("animal", animal.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				statusTypeCriteria.add(Restrictions.eq("animal", animal.booleanValue()));
			}
		}
		return statusTypeCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandStatusType loadProbandStatusTypeFromProbandStatusTypeVO(ProbandStatusTypeVO probandStatusTypeVO) {
		ProbandStatusType probandStatusType = null;
		Long id = probandStatusTypeVO.getId();
		if (id != null) {
			probandStatusType = this.load(id);
		}
		if (probandStatusType == null) {
			probandStatusType = ProbandStatusType.Factory.newInstance();
		}
		return probandStatusType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandStatusType probandStatusTypeVOToEntity(ProbandStatusTypeVO probandStatusTypeVO) {
		ProbandStatusType entity = this.loadProbandStatusTypeFromProbandStatusTypeVO(probandStatusTypeVO);
		this.probandStatusTypeVOToEntity(probandStatusTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandStatusTypeVOToEntity(
			ProbandStatusTypeVO source,
			ProbandStatusType target,
			boolean copyIfNull) {
		super.probandStatusTypeVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandStatusTypeVO toProbandStatusTypeVO(final ProbandStatusType entity) {
		return super.toProbandStatusTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandStatusTypeVO(
			ProbandStatusType source,
			ProbandStatusTypeVO target) {
		super.toProbandStatusTypeVO(source, target);
		target.setName(L10nUtil.getProbandStatusTypeName(Locales.USER, source.getNameL10nKey()));
	}
}