// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Order;

import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.CvSectionVO;

/**
 * @see CvSection
 */
public class CvSectionDaoImpl
		extends CvSectionDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	public CvSection cvSectionVOToEntity(CvSectionVO cvSectionVO) {
		CvSection entity = this.loadCvSectionFromCvSectionVO(cvSectionVO);
		this.cvSectionVOToEntity(cvSectionVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void cvSectionVOToEntity(
			CvSectionVO source,
			CvSection target,
			boolean copyIfNull) {
		super.cvSectionVOToEntity(source, target, copyIfNull);
	}

	@Override
	protected Collection<CvSection> handleFindByVisibleIdSorted(Boolean visible, Long sectionId) throws Exception {
		org.hibernate.Criteria cvSectionCriteria = this.getSession().createCriteria(CvSection.class);
		cvSectionCriteria.setCacheable(true);
		CriteriaUtil.applyVisibleIdCriterion("visible", cvSectionCriteria, visible, sectionId);
		cvSectionCriteria.addOrder(Order.asc("position"));
		return cvSectionCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private CvSection loadCvSectionFromCvSectionVO(CvSectionVO cvSectionVO) {
		CvSection cvSection = null;
		Long id = cvSectionVO.getId();
		if (id != null) {
			cvSection = this.load(id);
		}
		if (cvSection == null) {
			cvSection = CvSection.Factory.newInstance();
		}
		return cvSection;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvSectionVO toCvSectionVO(final CvSection entity) {
		return super.toCvSectionVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCvSectionVO(
			CvSection source,
			CvSectionVO target) {
		super.toCvSectionVO(source, target);
		target.setName(L10nUtil.getCvSectionName(Locales.USER, source.getNameL10nKey()));
		target.setTitlePreset(L10nUtil.getCvSectionTitlePreset(Locales.USER, source.getTitlePresetL10nKey()));
		target.setDescription(L10nUtil.getCvSectionDescription(Locales.USER, source.getDescriptionL10nKey()));
	}
}