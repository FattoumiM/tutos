// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.HashMap;

import org.phoenixctms.ctsms.vo.CriterionInVO;
import org.phoenixctms.ctsms.vo.CriterionInstantVO;
import org.phoenixctms.ctsms.vo.CriterionOutVO;
import org.phoenixctms.ctsms.vo.CriterionPropertyVO;
import org.phoenixctms.ctsms.vo.CriterionRestrictionVO;
import org.phoenixctms.ctsms.vo.CriterionTieVO;
import org.phoenixctms.ctsms.vocycle.CriterionGraph;

/**
 * @see Criterion
 */
public class CriterionDaoImpl
		extends CriterionDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	public Criterion criterionInstantVOToEntity(CriterionInstantVO criterionInstantVO) {
		Criterion entity = this.loadCriterionFromCriterionInstantVO(criterionInstantVO);
		this.criterionInstantVOToEntity(criterionInstantVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criterionInstantVOToEntity(
			CriterionInstantVO source,
			Criterion target,
			boolean copyIfNull) {
		super.criterionInstantVOToEntity(source, target, copyIfNull);
		Long propertyId = source.getPropertyId();
		Long restrictionId = source.getRestrictionId();
		Long tieId = source.getTieId();
		if (propertyId != null) {
			CriterionProperty property = this.getCriterionPropertyDao().load(propertyId);
			target.setPropertyNameL10nKey(property.getNameL10nKey());
			target.setModule(property.getModule());
		} else if (copyIfNull) {
			target.setPropertyNameL10nKey(null);
			target.setModule(null);
		}
		if (restrictionId != null) {
			CriterionRestriction restriction = this.getCriterionRestrictionDao().load(restrictionId);
			target.setRestriction(restriction.getRestriction());
		} else if (copyIfNull) {
			target.setRestriction(null);
		}
		if (tieId != null) {
			CriterionTie tie = this.getCriterionTieDao().load(tieId);
			target.setTie(tie.getTie());
		} else if (copyIfNull) {
			target.setTie(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Criterion criterionInVOToEntity(CriterionInVO criterionInVO) {
		Criterion entity = this.loadCriterionFromCriterionInVO(criterionInVO);
		this.criterionInVOToEntity(criterionInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criterionInVOToEntity(
			CriterionInVO source,
			Criterion target,
			boolean copyIfNull) {
		super.criterionInVOToEntity(source, target, copyIfNull);
		Long propertyId = source.getPropertyId();
		Long restrictionId = source.getRestrictionId();
		Long tieId = source.getTieId();
		if (propertyId != null) {
			CriterionProperty property = this.getCriterionPropertyDao().load(propertyId);
			target.setPropertyNameL10nKey(property.getNameL10nKey());
			target.setModule(property.getModule());
		} else if (copyIfNull) {
			target.setPropertyNameL10nKey(null);
			target.setModule(null);
		}
		if (restrictionId != null) {
			CriterionRestriction restriction = this.getCriterionRestrictionDao().load(restrictionId);
			target.setRestriction(restriction.getRestriction());
		} else if (copyIfNull) {
			target.setRestriction(null);
		}
		if (tieId != null) {
			CriterionTie tie = this.getCriterionTieDao().load(tieId);
			target.setTie(tie.getTie());
		} else if (copyIfNull) {
			target.setTie(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Criterion criterionOutVOToEntity(CriterionOutVO criterionOutVO) {
		Criterion entity = this.loadCriterionFromCriterionOutVO(criterionOutVO);
		this.criterionOutVOToEntity(criterionOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criterionOutVOToEntity(
			CriterionOutVO source,
			Criterion target,
			boolean copyIfNull) {
		super.criterionOutVOToEntity(source, target, copyIfNull);
		CriterionPropertyVO propertyVO = source.getProperty();
		CriterionRestrictionVO restrictionVO = source.getRestriction();
		CriterionTieVO tieVO = source.getTie();
		if (propertyVO != null) {
			CriterionProperty property = this.getCriterionPropertyDao().criterionPropertyVOToEntity(propertyVO);
			target.setPropertyNameL10nKey(property.getNameL10nKey());
			target.setModule(property.getModule());
		} else if (copyIfNull) {
			target.setPropertyNameL10nKey(null);
			target.setModule(null);
		}
		if (restrictionVO != null) {
			CriterionRestriction restriction = this.getCriterionRestrictionDao().criterionRestrictionVOToEntity(restrictionVO);
			target.setRestriction(restriction.getRestriction());
		} else if (copyIfNull) {
			target.setRestriction(null);
		}
		if (tieVO != null) {
			CriterionTie tie = this.getCriterionTieDao().criterionTieVOToEntity(tieVO);
			target.setTie(tie.getTie());
		} else if (copyIfNull) {
			target.setTie(null);
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Criterion loadCriterionFromCriterionInstantVO(CriterionInstantVO criterionInstantVO) {
		return Criterion.Factory.newInstance();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Criterion loadCriterionFromCriterionInVO(CriterionInVO criterionInVO) {
		return Criterion.Factory.newInstance();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Criterion loadCriterionFromCriterionOutVO(CriterionOutVO criterionOutVO) {
		throw new UnsupportedOperationException("out value object to recursive entity not supported");
		/* A typical implementation looks like this: Criterion criterion = this.load(criterionOutVO.getId()); if (criterion == null) { criterion = Criterion.Factory.newInstance();
		 * } return criterion; */
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriterionInstantVO toCriterionInstantVO(final Criterion entity) {
		return super.toCriterionInstantVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriterionInstantVO(
			Criterion source,
			CriterionInstantVO target) {
		super.toCriterionInstantVO(source, target);
		CriterionProperty property = this.getCriterionPropertyDao().findByNameL10nKey(source.getPropertyNameL10nKey());
		CriterionRestriction restriction = this.getCriterionRestrictionDao().findByRestriction(source.getRestriction());
		CriterionTie tie = this.getCriterionTieDao().findByTie(source.getTie());
		if (property != null) {
			target.setPropertyId(property.getId());
		}
		if (restriction != null) {
			target.setRestrictionId(restriction.getId());
		}
		if (tie != null) {
			target.setTieId(tie.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriterionInVO toCriterionInVO(final Criterion entity) {
		return super.toCriterionInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriterionInVO(
			Criterion source,
			CriterionInVO target) {
		super.toCriterionInVO(source, target);
		CriterionProperty property = this.getCriterionPropertyDao().findByNameL10nKey(source.getPropertyNameL10nKey());
		CriterionRestriction restriction = this.getCriterionRestrictionDao().findByRestriction(source.getRestriction());
		CriterionTie tie = this.getCriterionTieDao().findByTie(source.getTie());
		if (property != null) {
			target.setPropertyId(property.getId());
		}
		if (restriction != null) {
			target.setRestrictionId(restriction.getId());
		}
		if (tie != null) {
			target.setTieId(tie.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriterionOutVO toCriterionOutVO(final Criterion entity) {
		return super.toCriterionOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriterionOutVO(
			Criterion source,
			CriterionOutVO target) {
		(new CriterionGraph(this, this.getCriteriaDao(), this.getCriterionPropertyDao(), this.getCriterionRestrictionDao(), this.getCriterionTieDao())).toVOHelper(source, target,
				new HashMap<Class, HashMap<Long, Object>>());
	}

	@Override
	public void toCriterionOutVO(
			Criterion source,
			CriterionOutVO target, HashMap<Class, HashMap<Long, Object>> voMap) {
		(new CriterionGraph(this, this.getCriteriaDao(), this.getCriterionPropertyDao(), this.getCriterionRestrictionDao(), this.getCriterionTieDao())).toVOHelper(source, target,
				voMap);
	}
}