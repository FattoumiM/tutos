// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.util.Collection;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.InventoryOutVO;
import org.phoenixctms.ctsms.vo.InventoryStatusEntryInVO;
import org.phoenixctms.ctsms.vo.InventoryStatusEntryOutVO;
import org.phoenixctms.ctsms.vo.InventoryStatusTypeVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see InventoryStatusEntry
 */
public class InventoryStatusEntryDaoImpl
		extends InventoryStatusEntryDaoBase {

	private org.hibernate.Criteria createStatusEntryCriteria() {
		org.hibernate.Criteria statusEntryCriteria = this.getSession().createCriteria(InventoryStatusEntry.class);
		return statusEntryCriteria;
	}

	@Override
	protected Collection<InventoryStatusEntry> handleFindByAddressee(
			Long staffId, PSFVO psf) throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(InventoryStatusEntry.class, statusEntryCriteria);
		if (staffId != null) {
			statusEntryCriteria.add(Restrictions.eq("addressee.id", staffId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return statusEntryCriteria.list();
	}

	@Override
	protected Collection<InventoryStatusEntry> handleFindByDepartmentCategoryInterval(
			Long departmentId, Long inventoryCategoryId, Timestamp from, Timestamp to,
			Long statusTypeId, Boolean inventoryActive, Boolean bookable, Boolean hideAvailability) throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		CriteriaUtil.applyStopOpenIntervalCriterion(statusEntryCriteria, from, to, null);
		if (statusTypeId != null) {
			statusEntryCriteria.add(Restrictions.eq("type.id", statusTypeId.longValue()));
		}
		if (inventoryActive != null || hideAvailability != null) {
			Criteria typeCriteria = statusEntryCriteria.createCriteria("type", CriteriaSpecification.INNER_JOIN);
			if (inventoryActive != null) {
				typeCriteria.add(Restrictions.eq("inventoryActive", inventoryActive.booleanValue()));
			}
			if (hideAvailability != null) {
				typeCriteria.add(Restrictions.eq("hideAvailability", hideAvailability.booleanValue()));
			}
		}
		if (departmentId != null || inventoryCategoryId != null || bookable != null) {
			Criteria inventoryCriteria = statusEntryCriteria.createCriteria("inventory", CriteriaSpecification.INNER_JOIN);
			if (departmentId != null) {
				inventoryCriteria.add(Restrictions.eq("department.id", departmentId.longValue()));
			}
			if (inventoryCategoryId != null) {
				inventoryCriteria.add(Restrictions.eq("category.id", inventoryCategoryId.longValue()));
			}
			if (bookable != null) {
				inventoryCriteria.add(Restrictions.eq("bookable", bookable.booleanValue()));
			}
		}
		return statusEntryCriteria.list();
	}

	@Override
	protected Collection<InventoryStatusEntry> handleFindByInventory(
			Long inventoryId, PSFVO psf) throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(InventoryStatusEntry.class, statusEntryCriteria);
		if (inventoryId != null) {
			statusEntryCriteria.add(Restrictions.eq("inventory.id", inventoryId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return statusEntryCriteria.list();
	}

	@Override
	protected Collection<InventoryStatusEntry> handleFindByInventoryInterval(
			Long inventoryId, Timestamp from, Timestamp to, Boolean inventoryActive, Boolean hideAvailability) throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		CriteriaUtil.applyStopOpenIntervalCriterion(statusEntryCriteria, from, to, null);
		if (inventoryActive != null || hideAvailability != null) {
			Criteria statusTypeCriteria = statusEntryCriteria.createCriteria("type", CriteriaSpecification.INNER_JOIN);
			if (inventoryActive != null) {
				statusTypeCriteria.add(Restrictions.eq("inventoryActive", inventoryActive.booleanValue()));
			}
			if (hideAvailability != null) {
				statusTypeCriteria.add(Restrictions.eq("hideAvailability", hideAvailability.booleanValue()));
			}
		}
		if (inventoryId != null) {
			statusEntryCriteria.add(Restrictions.eq("inventory.id", inventoryId.longValue()));
		}
		return statusEntryCriteria.list();
	}

	@Override
	protected Collection<InventoryStatusEntry> handleFindByOriginator(
			Long staffId, PSFVO psf) throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(InventoryStatusEntry.class, statusEntryCriteria);
		if (staffId != null) {
			statusEntryCriteria.add(Restrictions.eq("originator.id", staffId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return statusEntryCriteria.list();
	}

	@Override
	protected Collection<InventoryStatusEntry> handleFindInventoryStatus(
			Timestamp now, Long inventoryId, Long departmentId,
			Long inventoryCategoryId, Boolean inventoryActive, Boolean hideAvailability, PSFVO psf)
			throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(InventoryStatusEntry.class, statusEntryCriteria);
		if (inventoryId != null) {
			statusEntryCriteria.add(Restrictions.eq("inventory.id", inventoryId.longValue()));
		}
		if (departmentId != null) {
			criteriaMap.createCriteria("inventory").add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (inventoryCategoryId != null) {
			criteriaMap.createCriteria("inventory").add(Restrictions.eq("category.id", inventoryCategoryId.longValue()));
		}
		if (inventoryActive != null) {
			criteriaMap.createCriteria("type").add(Restrictions.eq("inventoryActive", inventoryActive.booleanValue()));
		}
		if (hideAvailability != null) {
			criteriaMap.createCriteria("type").add(Restrictions.eq("hideAvailability", hideAvailability.booleanValue()));
		}
		CriteriaUtil.applyCurrentStatusCriterion(statusEntryCriteria, now, null);
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return statusEntryCriteria.list();
	}

	@Override
	protected long handleGetCount(Long inventoryId) throws Exception {
		Criteria statusEntryCriteria = createStatusEntryCriteria();
		if (inventoryId != null) {
			statusEntryCriteria.add(Restrictions.eq("inventory.id", inventoryId.longValue()));
		}
		return (Long) statusEntryCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public InventoryStatusEntry inventoryStatusEntryInVOToEntity(InventoryStatusEntryInVO inventoryStatusEntryInVO) {
		InventoryStatusEntry entity = this.loadInventoryStatusEntryFromInventoryStatusEntryInVO(inventoryStatusEntryInVO);
		this.inventoryStatusEntryInVOToEntity(inventoryStatusEntryInVO, entity, true);
		return entity;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void inventoryStatusEntryInVOToEntity(
			InventoryStatusEntryInVO source,
			InventoryStatusEntry target,
			boolean copyIfNull) {
		super.inventoryStatusEntryInVOToEntity(source, target, copyIfNull);
		Long typeId = source.getTypeId();
		Long inventoryId = source.getInventoryId();
		Long originatorId = source.getOriginatorId();
		Long addresseeId = source.getAddresseeId();
		if (typeId != null) {
			target.setType(this.getInventoryStatusTypeDao().load(typeId));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (inventoryId != null) {
			Inventory inventory = this.getInventoryDao().load(inventoryId);
			target.setInventory(inventory);
			inventory.addStatusEntries(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeStatusEntries(target);
			}
		}
		if (originatorId != null) {
			Staff originator = this.getStaffDao().load(originatorId);
			target.setOriginator(originator);
			originator.addLoans(target);
		} else if (copyIfNull) {
			Staff originator = target.getOriginator();
			target.setOriginator(null);
			if (originator != null) {
				originator.removeLoans(target);
			}
		}
		if (addresseeId != null) {
			Staff addressee = this.getStaffDao().load(addresseeId);
			target.setAddressee(addressee);
			addressee.addLendings(target);
		} else if (copyIfNull) {
			Staff addressee = target.getAddressee();
			target.setAddressee(null);
			if (addressee != null) {
				addressee.removeLendings(target);
			}
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public InventoryStatusEntry inventoryStatusEntryOutVOToEntity(InventoryStatusEntryOutVO inventoryStatusEntryOutVO) {
		InventoryStatusEntry entity = this.loadInventoryStatusEntryFromInventoryStatusEntryOutVO(inventoryStatusEntryOutVO);
		this.inventoryStatusEntryOutVOToEntity(inventoryStatusEntryOutVO, entity, true);
		return entity;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void inventoryStatusEntryOutVOToEntity(
			InventoryStatusEntryOutVO source,
			InventoryStatusEntry target,
			boolean copyIfNull) {
		super.inventoryStatusEntryOutVOToEntity(source, target, copyIfNull);
		InventoryStatusTypeVO typeVO = source.getType();
		InventoryOutVO inventoryVO = source.getInventory();
		StaffOutVO originatorVO = source.getOriginator();
		StaffOutVO addresseeVO = source.getAddressee();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (typeVO != null) {
			target.setType(this.getInventoryStatusTypeDao().inventoryStatusTypeVOToEntity(typeVO));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (inventoryVO != null) {
			Inventory inventory = this.getInventoryDao().inventoryOutVOToEntity(inventoryVO);
			target.setInventory(inventory);
			inventory.addStatusEntries(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeStatusEntries(target);
			}
		}
		if (originatorVO != null) {
			Staff originator = this.getStaffDao().staffOutVOToEntity(originatorVO);
			target.setOriginator(originator);
			originator.addLoans(target);
		} else if (copyIfNull) {
			Staff originator = target.getOriginator();
			target.setOriginator(null);
			if (originator != null) {
				originator.removeLoans(target);
			}
		}
		if (addresseeVO != null) {
			Staff addressee = this.getStaffDao().staffOutVOToEntity(addresseeVO);
			target.setAddressee(addressee);
			addressee.addLendings(target);
		} else if (copyIfNull) {
			Staff addressee = target.getAddressee();
			target.setAddressee(null);
			if (addressee != null) {
				addressee.removeLendings(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InventoryStatusEntry loadInventoryStatusEntryFromInventoryStatusEntryInVO(InventoryStatusEntryInVO inventoryStatusEntryInVO) {
		InventoryStatusEntry inventoryStatusEntry = null;
		Long id = inventoryStatusEntryInVO.getId();
		if (id != null) {
			inventoryStatusEntry = this.load(id);
		}
		if (inventoryStatusEntry == null) {
			inventoryStatusEntry = InventoryStatusEntry.Factory.newInstance();
		}
		return inventoryStatusEntry;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InventoryStatusEntry loadInventoryStatusEntryFromInventoryStatusEntryOutVO(InventoryStatusEntryOutVO inventoryStatusEntryOutVO) {
		InventoryStatusEntry inventoryStatusEntry = this.load(inventoryStatusEntryOutVO.getId());
		if (inventoryStatusEntry == null) {
			inventoryStatusEntry = InventoryStatusEntry.Factory.newInstance();
		}
		return inventoryStatusEntry;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public InventoryStatusEntryInVO toInventoryStatusEntryInVO(final InventoryStatusEntry entity) {
		return super.toInventoryStatusEntryInVO(entity);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void toInventoryStatusEntryInVO(
			InventoryStatusEntry source,
			InventoryStatusEntryInVO target) {
		super.toInventoryStatusEntryInVO(source, target);
		InventoryStatusType type = source.getType();
		Inventory inventory = source.getInventory();
		Staff originator = source.getOriginator();
		Staff addressee = source.getAddressee();
		if (type != null) {
			target.setTypeId(type.getId());
		}
		if (inventory != null) {
			target.setInventoryId(inventory.getId());
		}
		if (originator != null) {
			target.setOriginatorId(originator.getId());
		}
		if (addressee != null) {
			target.setAddresseeId(addressee.getId());
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public InventoryStatusEntryOutVO toInventoryStatusEntryOutVO(final InventoryStatusEntry entity) {
		return super.toInventoryStatusEntryOutVO(entity);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void toInventoryStatusEntryOutVO(
			InventoryStatusEntry source,
			InventoryStatusEntryOutVO target) {
		super.toInventoryStatusEntryOutVO(source, target);
		InventoryStatusType type = source.getType();
		Inventory inventory = source.getInventory();
		Staff originator = source.getOriginator();
		Staff addressee = source.getAddressee();
		User modifiedUser = source.getModifiedUser();
		if (type != null) {
			target.setType(this.getInventoryStatusTypeDao().toInventoryStatusTypeVO(type));
		}
		if (inventory != null) {
			target.setInventory(this.getInventoryDao().toInventoryOutVO(inventory));
		}
		if (originator != null) {
			target.setOriginator(this.getStaffDao().toStaffOutVO(originator));
		}
		if (addressee != null) {
			target.setAddressee(this.getStaffDao().toStaffOutVO(addressee));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}
}