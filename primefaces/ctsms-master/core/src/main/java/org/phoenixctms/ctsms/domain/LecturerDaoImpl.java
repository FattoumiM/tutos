// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.CourseOutVO;
import org.phoenixctms.ctsms.vo.LecturerCompetenceVO;
import org.phoenixctms.ctsms.vo.LecturerInVO;
import org.phoenixctms.ctsms.vo.LecturerOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see Lecturer
 */
public class LecturerDaoImpl
		extends LecturerDaoBase {

	private org.hibernate.Criteria createLecturerCriteria() {
		org.hibernate.Criteria lecturerCriteria = this.getSession().createCriteria(Lecturer.class);
		return lecturerCriteria;
	}

	@Override
	protected Collection<Lecturer> handleFindByCourseStaffCompetence(
			Long courseId, Long staffId, Long competenceId, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria lecturerCriteria = createLecturerCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Lecturer.class, lecturerCriteria);
		if (courseId != null) {
			lecturerCriteria.add(Restrictions.eq("course.id", courseId.longValue()));
		}
		if (staffId != null) {
			lecturerCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (competenceId != null) {
			lecturerCriteria.add(Restrictions.eq("competence.id", competenceId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return lecturerCriteria.list();
	}

	@Override
	protected long handleGetCount(Long courseId, Long staffId, Long competenceId) throws Exception {
		org.hibernate.Criteria lecturerCriteria = createLecturerCriteria();
		if (courseId != null) {
			lecturerCriteria.add(Restrictions.eq("course.id", courseId.longValue()));
		}
		if (staffId != null) {
			lecturerCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (competenceId != null) {
			lecturerCriteria.add(Restrictions.eq("competence.id", competenceId.longValue()));
		}
		return (Long) lecturerCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Lecturer lecturerInVOToEntity(LecturerInVO lecturerInVO) {
		Lecturer entity = this.loadLecturerFromLecturerInVO(lecturerInVO);
		this.lecturerInVOToEntity(lecturerInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void lecturerInVOToEntity(
			LecturerInVO source,
			Lecturer target,
			boolean copyIfNull) {
		super.lecturerInVOToEntity(source, target, copyIfNull);
		Long courseId = source.getCourseId();
		Long staffId = source.getStaffId();
		Long competenceId = source.getCompetenceId();
		if (courseId != null) {
			Course course = this.getCourseDao().load(courseId);
			target.setCourse(course);
			course.addLecturers(target);
		} else if (copyIfNull) {
			Course course = target.getCourse();
			target.setCourse(null);
			if (course != null) {
				course.removeLecturers(target);
			}
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addLectures(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeLectures(target);
			}
		}
		if (competenceId != null) {
			target.setCompetence(this.getLecturerCompetenceDao().load(competenceId));
		} else if (copyIfNull) {
			target.setCompetence(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Lecturer lecturerOutVOToEntity(LecturerOutVO lecturerOutVO) {
		Lecturer entity = this.loadLecturerFromLecturerOutVO(lecturerOutVO);
		this.lecturerOutVOToEntity(lecturerOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void lecturerOutVOToEntity(
			LecturerOutVO source,
			Lecturer target,
			boolean copyIfNull) {
		super.lecturerOutVOToEntity(source, target, copyIfNull);
		CourseOutVO courseVO = source.getCourse();
		StaffOutVO staffVO = source.getStaff();
		LecturerCompetenceVO competenceVO = source.getCompetence();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (courseVO != null) {
			Course course = this.getCourseDao().courseOutVOToEntity(courseVO);
			target.setCourse(course);
			course.addLecturers(target);
		} else if (copyIfNull) {
			Course course = target.getCourse();
			target.setCourse(null);
			if (course != null) {
				course.removeLecturers(target);
			}
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addLectures(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeLectures(target);
			}
		}
		if (competenceVO != null) {
			target.setCompetence(this.getLecturerCompetenceDao().lecturerCompetenceVOToEntity(competenceVO));
		} else if (copyIfNull) {
			target.setCompetence(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Lecturer loadLecturerFromLecturerInVO(LecturerInVO lecturerInVO) {
		Lecturer lecturer = null;
		Long id = lecturerInVO.getId();
		if (id != null) {
			lecturer = this.load(id);
		}
		if (lecturer == null) {
			lecturer = Lecturer.Factory.newInstance();
		}
		return lecturer;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Lecturer loadLecturerFromLecturerOutVO(LecturerOutVO lecturerOutVO) {
		Lecturer lecturer = this.load(lecturerOutVO.getId());
		if (lecturer == null) {
			lecturer = Lecturer.Factory.newInstance();
		}
		return lecturer;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LecturerInVO toLecturerInVO(final Lecturer entity) {
		return super.toLecturerInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLecturerInVO(
			Lecturer source,
			LecturerInVO target) {
		super.toLecturerInVO(source, target);
		Course course = source.getCourse();
		Staff staff = source.getStaff();
		LecturerCompetence competence = source.getCompetence();
		if (course != null) {
			target.setCourseId(course.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
		if (competence != null) {
			target.setCompetenceId(competence.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LecturerOutVO toLecturerOutVO(final Lecturer entity) {
		return super.toLecturerOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLecturerOutVO(
			Lecturer source,
			LecturerOutVO target) {
		super.toLecturerOutVO(source, target);
		Course course = source.getCourse();
		Staff staff = source.getStaff();
		LecturerCompetence competence = source.getCompetence();
		User modifiedUser = source.getModifiedUser();
		if (course != null) {
			target.setCourse(this.getCourseDao().toCourseOutVO(course));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (competence != null) {
			target.setCompetence(this.getLecturerCompetenceDao().toLecturerCompetenceVO(competence));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}
}