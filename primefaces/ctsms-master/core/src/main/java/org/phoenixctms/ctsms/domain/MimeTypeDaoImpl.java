// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.FileModule;
import org.phoenixctms.ctsms.vo.MimeTypeVO;

/**
 * @see MimeType
 */
public class MimeTypeDaoImpl
		extends MimeTypeDaoBase {

	private org.hibernate.Criteria createMimeTypeCriteria() {
		org.hibernate.Criteria mimeTypeCriteria = this.getSession().createCriteria(MimeType.class);
		mimeTypeCriteria.setCacheable(true);
		return mimeTypeCriteria;
	}

	@Override
	protected Collection<MimeType> handleFindByMimeTypeModule(String mimeType,
			FileModule module) throws Exception {
		org.hibernate.Criteria mimeTypeCriteria = createMimeTypeCriteria();
		if (mimeType != null && mimeType.length() > 0) {
			mimeTypeCriteria.add(Restrictions.eq("mimeType", mimeType));
		}
		if (module != null) {
			mimeTypeCriteria.add(Restrictions.eq("module", module));
		}
		return mimeTypeCriteria.list();
	}

	@Override
	protected Collection<String> handleFindFileNameExtensions(FileModule module, Boolean image)
			throws Exception {
		org.hibernate.Criteria mimeTypeCriteria = createMimeTypeCriteria();
		if (module != null) {
			mimeTypeCriteria.add(Restrictions.eq("module", module));
		}
		if (image != null) {
			mimeTypeCriteria.add(Restrictions.eq("image", image.booleanValue()));
		}
		mimeTypeCriteria.setProjection(Projections.distinct(Projections.property("fileNameExtensions")));
		return mimeTypeCriteria.list();
	}

	@Override
	protected long handleGetCount(String mimeType,
			FileModule module) throws Exception {
		org.hibernate.Criteria mimeTypeCriteria = createMimeTypeCriteria();
		if (mimeType != null && mimeType.length() > 0) {
			mimeTypeCriteria.add(Restrictions.eq("mimeType", mimeType));
		}
		if (module != null) {
			mimeTypeCriteria.add(Restrictions.eq("module", module));
		}
		return (Long) mimeTypeCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private MimeType loadMimeTypeFromMimeTypeVO(MimeTypeVO mimeTypeVO) {
		MimeType mimeType = null;
		Long id = mimeTypeVO.getId();
		if (id != null) {
			mimeType = this.load(id);
		}
		if (mimeType == null) {
			mimeType = MimeType.Factory.newInstance();
		}
		return mimeType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public MimeType mimeTypeVOToEntity(MimeTypeVO mimeTypeVO) {
		MimeType entity = this.loadMimeTypeFromMimeTypeVO(mimeTypeVO);
		this.mimeTypeVOToEntity(mimeTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void mimeTypeVOToEntity(
			MimeTypeVO source,
			MimeType target,
			boolean copyIfNull) {
		super.mimeTypeVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public MimeTypeVO toMimeTypeVO(final MimeType entity) {
		return super.toMimeTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toMimeTypeVO(
			MimeType source,
			MimeTypeVO target) {
		super.toMimeTypeVO(source, target);
	}
}