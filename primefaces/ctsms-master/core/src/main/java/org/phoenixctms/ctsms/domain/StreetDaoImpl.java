// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.StreetVO;

/**
 * @see Street
 */
public class StreetDaoImpl
		extends StreetDaoBase {

	private static void applyStreetCriterions(org.hibernate.Criteria streetCriteria, String countryName,
			String zipCode, String cityName, String streetNameInfix) {
		if (!CommonUtil.isEmptyString(countryName)) {
			streetCriteria.add(Restrictions.eq("countryName", countryName));
		}
		if (!CommonUtil.isEmptyString(zipCode)) {
			streetCriteria.add(Restrictions.eq("zipCode", zipCode));
		}
		if (!CommonUtil.isEmptyString(cityName)) {
			streetCriteria.add(Restrictions.eq("cityName", cityName));
		}
		CategoryCriterion.apply(streetCriteria, new CategoryCriterion(streetNameInfix, "streetName", MatchMode.ANYWHERE));
	}

	private org.hibernate.Criteria createStreetCriteria() {
		org.hibernate.Criteria streetCriteria = this.getSession().createCriteria(Street.class);
		streetCriteria.setCacheable(true);
		return streetCriteria;
	}

	@Override
	protected Collection<String> handleFindStreetNames(String countryName,
			String zipCode, String cityName, String streetNameInfix, Integer limit)
			throws Exception {
		org.hibernate.Criteria streetCriteria = createStreetCriteria();
		applyStreetCriterions(streetCriteria, countryName, zipCode, cityName, streetNameInfix);
		streetCriteria.add(Restrictions.not(Restrictions.or(Restrictions.eq("streetName", ""), Restrictions.isNull("streetName"))));
		streetCriteria.addOrder(Order.asc("streetName"));
		streetCriteria.setProjection(Projections.distinct(Projections.property("streetName")));
		CriteriaUtil
				.applyLimit(limit, Settings.getIntNullable(SettingCodes.STREET_NAME_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
						DefaultSettings.STREET_NAME_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), streetCriteria);
		return streetCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<Street> handleFindStreets(String countryName, String zipCode, String cityName, String streetNameInfix, Integer limit) {
		org.hibernate.Criteria streetCriteria = createStreetCriteria();
		applyStreetCriterions(streetCriteria, countryName, zipCode, cityName, streetNameInfix);
		streetCriteria.addOrder(Order.asc("countryName"));
		streetCriteria.addOrder(Order.asc("cityName"));
		streetCriteria.addOrder(Order.asc("zipCode"));
		streetCriteria.addOrder(Order.asc("streetName"));
		CriteriaUtil.applyLimit(limit,
				Settings.getIntNullable(SettingCodes.STREET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS, DefaultSettings.STREET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT),
				streetCriteria);
		return streetCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<String> handleFindZipCodes(String countryName, String zipCodePrefix, String cityName, String streetName, Integer limit) {
		org.hibernate.Criteria streetCriteria = createStreetCriteria();
		if (!CommonUtil.isEmptyString(countryName)) {
			streetCriteria.add(Restrictions.eq("countryName", countryName));
		}
		CategoryCriterion.apply(streetCriteria, new CategoryCriterion(zipCodePrefix, "zipCode", MatchMode.START));
		if (!CommonUtil.isEmptyString(cityName)) {
			streetCriteria.add(Restrictions.eq("cityName", cityName));
		}
		if (!CommonUtil.isEmptyString(streetName)) {
			streetCriteria.add(Restrictions.eq("streetName", streetName));
		}
		streetCriteria.add(Restrictions.not(Restrictions.or(Restrictions.eq("zipCode", ""), Restrictions.isNull("zipCode"))));
		streetCriteria.addOrder(Order.asc("zipCode"));
		streetCriteria.setProjection(Projections.distinct(Projections.property("zipCode")));
		CriteriaUtil.applyLimit(limit,
				Settings.getIntNullable(SettingCodes.ZIP_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS, DefaultSettings.ZIP_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT),
				streetCriteria);
		return streetCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Street loadStreetFromStreetVO(StreetVO streetVO) {
		Street street = null;
		Long id = streetVO.getId();
		if (id != null) {
			street = this.load(id);
		}
		if (street == null) {
			street = Street.Factory.newInstance();
		}
		return street;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Street streetVOToEntity(StreetVO streetVO) {
		Street entity = this.loadStreetFromStreetVO(streetVO);
		this.streetVOToEntity(streetVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void streetVOToEntity(
			StreetVO source,
			Street target,
			boolean copyIfNull) {
		super.streetVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StreetVO toStreetVO(final Street entity) {
		return super.toStreetVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toStreetVO(
			Street source,
			StreetVO target) {
		super.toStreetVO(source, target);
	}
}