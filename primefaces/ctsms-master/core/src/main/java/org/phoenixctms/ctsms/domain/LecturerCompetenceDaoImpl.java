// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.LecturerCompetenceVO;

/**
 * @see LecturerCompetence
 */
public class LecturerCompetenceDaoImpl
		extends LecturerCompetenceDaoBase {

	@Override
	protected Collection<LecturerCompetence> handleFindByVisibleId(Boolean visible, Long competenceId) throws Exception {
		org.hibernate.Criteria competenceCriteria = this.getSession().createCriteria(LecturerCompetence.class);
		competenceCriteria.setCacheable(true);
		CriteriaUtil.applyVisibleIdCriterion("visible", competenceCriteria, visible, competenceId);
		return competenceCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LecturerCompetence lecturerCompetenceVOToEntity(LecturerCompetenceVO lecturerCompetenceVO) {
		LecturerCompetence entity = this.loadLecturerCompetenceFromLecturerCompetenceVO(lecturerCompetenceVO);
		this.lecturerCompetenceVOToEntity(lecturerCompetenceVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void lecturerCompetenceVOToEntity(
			LecturerCompetenceVO source,
			LecturerCompetence target,
			boolean copyIfNull) {
		super.lecturerCompetenceVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private LecturerCompetence loadLecturerCompetenceFromLecturerCompetenceVO(LecturerCompetenceVO lecturerCompetenceVO) {
		LecturerCompetence lecturerCompetence = null;
		Long id = lecturerCompetenceVO.getId();
		if (id != null) {
			lecturerCompetence = this.load(id);
		}
		if (lecturerCompetence == null) {
			lecturerCompetence = LecturerCompetence.Factory.newInstance();
		}
		return lecturerCompetence;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LecturerCompetenceVO toLecturerCompetenceVO(final LecturerCompetence entity) {
		return super.toLecturerCompetenceVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLecturerCompetenceVO(
			LecturerCompetence source,
			LecturerCompetenceVO target) {
		super.toLecturerCompetenceVO(source, target);
		target.setName(L10nUtil.getLecturerCompetenceName(Locales.USER, source.getNameL10nKey()));
	}
}