// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.OpsCodeVO;
import org.phoenixctms.ctsms.vo.OpsSystVO;

/**
 * @see OpsCode
 */
public class OpsCodeDaoImpl
		extends OpsCodeDaoBase {

	private final static boolean MATCH_FIRST_CODE = true;

	private static void applyOpsCodeCodeCriterions(org.hibernate.Criteria opsCodeCriteria, String codePrefix) {
		CategoryCriterion.apply(opsCodeCriteria, new CategoryCriterion(codePrefix, "firstCode", MatchMode.START));
		applyOpsCodeCriterions(opsCodeCriteria);
	}

	private static void applyOpsCodeCriterions(org.hibernate.Criteria opsCodeCriteria) {
		opsCodeCriteria.add(Restrictions.eq("revision", Settings.getString(SettingCodes.OPS_CODE_REVISION, Bundle.SETTINGS, DefaultSettings.OPS_CODE_REVISION)));
		opsCodeCriteria.add(Restrictions.and(Restrictions.ne("firstCode", ""), Restrictions.isNotNull("firstCode")));
	}

	private static void applyOpsCodeTextCriterions(org.hibernate.Criteria opsCodeCriteria, String textInfix) {
		ArrayList<CategoryCriterion> criterions = new ArrayList<CategoryCriterion>();
		criterions.add(new CategoryCriterion(textInfix, "text", MatchMode.ANYWHERE));
		if (MATCH_FIRST_CODE) {
			criterions.add(new CategoryCriterion(textInfix, "firstCode", MatchMode.EXACT));
		}
		CategoryCriterion.applyOr(opsCodeCriteria, criterions);
		applyOpsCodeCriterions(opsCodeCriteria);
	}

	private org.hibernate.Criteria createOpsCodeCriteria(boolean cacheable) {
		org.hibernate.Criteria opsCodeCriteria = this.getSession().createCriteria(OpsCode.class);
		if (cacheable) {
			opsCodeCriteria.setCacheable(true);
		}
		return opsCodeCriteria;
	}

	@Override
	protected Collection<String> handleFindOpsCodeCodes(String codePrefix,
			Integer limit) throws Exception {
		org.hibernate.Criteria opsCodeCriteria = createOpsCodeCriteria(true);
		applyOpsCodeCodeCriterions(opsCodeCriteria, codePrefix);
		opsCodeCriteria.add(Restrictions.not(Restrictions.or(Restrictions.eq("firstCode", ""), Restrictions.isNull("firstCode"))));
		opsCodeCriteria.addOrder(Order.asc("firstCode"));
		opsCodeCriteria.setProjection(Projections.distinct(Projections.property("firstCode")));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.OPS_CODE_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.OPS_CODE_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), opsCodeCriteria);
		return opsCodeCriteria.list();
	}

	@Override
	protected Collection<OpsCode> handleFindOpsCodes(String textInfix, Integer limit) {
		org.hibernate.Criteria opsCodeCriteria = createOpsCodeCriteria(true);
		applyOpsCodeTextCriterions(opsCodeCriteria, textInfix);
		opsCodeCriteria.addOrder(Order.asc("text"));
		CriteriaUtil.applyLimit(limit,
				Settings.getIntNullable(SettingCodes.OPS_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS, DefaultSettings.OPS_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT),
				opsCodeCriteria);
		return opsCodeCriteria.list();
	}

	@Override
	protected Collection<String> handleFindOpsCodeTexts(String textInfix, Integer limit) {
		org.hibernate.Criteria opsCodeCriteria = createOpsCodeCriteria(true);
		applyOpsCodeTextCriterions(opsCodeCriteria, textInfix);
		opsCodeCriteria.add(Restrictions.not(Restrictions.or(Restrictions.eq("text", ""), Restrictions.isNull("text"))));
		opsCodeCriteria.addOrder(Order.asc("text"));
		opsCodeCriteria.setProjection(Projections.distinct(Projections.property("text")));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.OPS_CODE_TEXT_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.OPS_CODE_TEXT_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), opsCodeCriteria);
		return opsCodeCriteria.list();
	}

	@Override
	protected long handleGetProcedureCount(String revision) throws Exception {
		org.hibernate.Criteria opsCodeCriteria = createOpsCodeCriteria(false);
		opsCodeCriteria.add(Restrictions.eq("revision", revision));
		opsCodeCriteria.createCriteria("procedures", CriteriaSpecification.INNER_JOIN);
		return (Long) opsCodeCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private OpsCode loadOpsCodeFromOpsCodeVO(OpsCodeVO opsCodeVO) {
		Long id = opsCodeVO.getId();
		OpsCode opsCode = null;
		if (id != null) {
			opsCode = this.load(id);
		}
		if (opsCode == null) {
			opsCode = OpsCode.Factory.newInstance();
		}
		return opsCode;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public OpsCode opsCodeVOToEntity(OpsCodeVO opsCodeVO) {
		OpsCode entity = this.loadOpsCodeFromOpsCodeVO(opsCodeVO);
		this.opsCodeVOToEntity(opsCodeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void opsCodeVOToEntity(
			OpsCodeVO source,
			OpsCode target,
			boolean copyIfNull) {
		super.opsCodeVOToEntity(source, target, copyIfNull);
		OpsSystVO systematicsVO = source.getSystematics();
		if (systematicsVO != null) {
			OpsSyst systematics = this.getOpsSystDao().opsSystVOToEntity(systematicsVO);
			target.setSystematics(systematics);
			systematics.addCodes(target);
		} else if (copyIfNull) {
			OpsSyst systematics = target.getSystematics();
			target.setSystematics(null);
			if (systematics != null) {
				systematics.removeCodes(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public OpsCodeVO toOpsCodeVO(final OpsCode entity) {
		return super.toOpsCodeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toOpsCodeVO(
			OpsCode source,
			OpsCodeVO target) {
		super.toOpsCodeVO(source, target);
		OpsSyst systematics = source.getSystematics();
		if (systematics != null) {
			target.setSystematics(this.getOpsSystDao().toOpsSystVO(systematics));
		}
		StringBuilder code = new StringBuilder();
		if (!CommonUtil.isEmptyString(source.getFirstCode())) {
			code.append(source.getFirstCode());
		}
		if (!CommonUtil.isEmptyString(source.getSecondCode())) {
			if (code.length() > 0) {
				code.append(" ");
			}
			code.append(source.getSecondCode());
		}
		target.setCode(code.toString());
	}
}