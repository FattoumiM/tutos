// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.DateFormat;
import java.util.Collection;
import java.util.Date;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.pdf.CVPDFDefaultSettings;
import org.phoenixctms.ctsms.pdf.CVPDFLabelCodes;
import org.phoenixctms.ctsms.pdf.CVPDFSettingCodes;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.ServiceUtil;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.CvPositionInVO;
import org.phoenixctms.ctsms.vo.CvPositionOutVO;
import org.phoenixctms.ctsms.vo.CvPositionPDFVO;
import org.phoenixctms.ctsms.vo.CvSectionVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.StaffOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see CvPosition
 */
public class CvPositionDaoImpl
		extends CvPositionDaoBase {

	private org.hibernate.Criteria createCvPositionCriteria() {
		org.hibernate.Criteria cvPositionCriteria = this.getSession().createCriteria(CvPosition.class);
		return cvPositionCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvPosition cvPositionInVOToEntity(CvPositionInVO cvPositionInVO) {
		CvPosition entity = this.loadCvPositionFromCvPositionInVO(cvPositionInVO);
		this.cvPositionInVOToEntity(cvPositionInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void cvPositionInVOToEntity(
			CvPositionInVO source,
			CvPosition target,
			boolean copyIfNull) {
		super.cvPositionInVOToEntity(source, target, copyIfNull);
		Long sectionId = source.getSectionId();
		Long institutionId = source.getInstitutionId();
		Long staffId = source.getStaffId();
		if (sectionId != null) {
			target.setSection(this.getCvSectionDao().load(sectionId));
		} else if (copyIfNull) {
			target.setSection(null);
		}
		if (staffId != null) {
			Staff staff = this.getStaffDao().load(staffId);
			target.setStaff(staff);
			staff.addCvPositions(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeCvPositions(target);
			}
		}
		if (institutionId != null) {
			Staff institution = this.getStaffDao().load(institutionId);
			target.setInstitution(institution);
			institution.addInstitutionCvPositions(target);
		} else if (copyIfNull) {
			Staff institution = target.getInstitution();
			target.setInstitution(null);
			if (institution != null) {
				institution.removeInstitutionCvPositions(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvPosition cvPositionOutVOToEntity(CvPositionOutVO cvPositionOutVO) {
		CvPosition entity = this.loadCvPositionFromCvPositionOutVO(cvPositionOutVO);
		this.cvPositionOutVOToEntity(cvPositionOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void cvPositionOutVOToEntity(
			CvPositionOutVO source,
			CvPosition target,
			boolean copyIfNull) {
		super.cvPositionOutVOToEntity(source, target, copyIfNull);
		CvSectionVO sectionVO = source.getSection();
		StaffOutVO institutionVO = source.getInstitution();
		StaffOutVO staffVO = source.getStaff();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (sectionVO != null) {
			target.setSection(this.getCvSectionDao().cvSectionVOToEntity(sectionVO));
		} else if (copyIfNull) {
			target.setSection(null);
		}
		if (institutionVO != null) {
			Staff institution = this.getStaffDao().staffOutVOToEntity(institutionVO);
			target.setInstitution(institution);
			institution.addInstitutionCvPositions(target);
		} else if (copyIfNull) {
			Staff institution = target.getInstitution();
			target.setInstitution(null);
			if (institution != null) {
				institution.removeInstitutionCvPositions(target);
			}
		}
		if (staffVO != null) {
			Staff staff = this.getStaffDao().staffOutVOToEntity(staffVO);
			target.setStaff(staff);
			staff.addCvPositions(target);
		} else if (copyIfNull) {
			Staff staff = target.getStaff();
			target.setStaff(null);
			if (staff != null) {
				staff.removeCvPositions(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvPosition cvPositionPDFVOToEntity(CvPositionPDFVO cvPositionPDFVO) {
		CvPosition entity = this.loadCvPositionFromCvPositionPDFVO(cvPositionPDFVO);
		this.cvPositionPDFVOToEntity(cvPositionPDFVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void cvPositionPDFVOToEntity(
			CvPositionPDFVO source,
			CvPosition target,
			boolean copyIfNull) {
		super.cvPositionPDFVOToEntity(source, target, copyIfNull);
	}

	@Override
	protected Collection<CvPosition> handleFindByInstitution(
			Long institutionId, PSFVO psf) throws Exception {
		org.hibernate.Criteria cvPositionCriteria = createCvPositionCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(CvPosition.class, cvPositionCriteria);
		if (institutionId != null) {
			cvPositionCriteria.add(Restrictions.eq("institution.id", institutionId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return cvPositionCriteria.list();
	}

	/**
	 * @throws Exception
	 * @inheritDoc
	 */
	@Override
	protected Collection<CvPosition> handleFindByStaffSection(Long staffId, Long sectionId, Boolean showCv, PSFVO psf) throws Exception {
		org.hibernate.Criteria cvPositionCriteria = createCvPositionCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(CvPosition.class, cvPositionCriteria);
		if (staffId != null) {
			cvPositionCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (sectionId != null) {
			cvPositionCriteria.add(Restrictions.eq("section.id", sectionId.longValue()));
		}
		if (showCv != null) {
			cvPositionCriteria.add(Restrictions.eq("showCv", showCv.booleanValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return cvPositionCriteria.list();
	}

	@Override
	protected long handleGetCount(Long staffId, Long sectionId, Boolean showCv) throws Exception {
		org.hibernate.Criteria cvPositionCriteria = createCvPositionCriteria();
		if (staffId != null) {
			cvPositionCriteria.add(Restrictions.eq("staff.id", staffId.longValue()));
		}
		if (sectionId != null) {
			cvPositionCriteria.add(Restrictions.eq("section.id", sectionId.longValue()));
		}
		if (showCv != null) {
			cvPositionCriteria.add(Restrictions.eq("showCv", showCv.booleanValue()));
		}
		return (Long) cvPositionCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private CvPosition loadCvPositionFromCvPositionInVO(CvPositionInVO cvPositionInVO) {
		CvPosition cvPosition = null;
		Long id = cvPositionInVO.getId();
		if (id != null) {
			cvPosition = this.load(id);
		}
		if (cvPosition == null) {
			cvPosition = CvPosition.Factory.newInstance();
		}
		return cvPosition;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private CvPosition loadCvPositionFromCvPositionOutVO(CvPositionOutVO cvPositionOutVO) {
		CvPosition cvPosition = this.load(cvPositionOutVO.getId());
		if (cvPosition == null) {
			cvPosition = CvPosition.Factory.newInstance();
		}
		return cvPosition;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private CvPosition loadCvPositionFromCvPositionPDFVO(CvPositionPDFVO cvPositionPDFVO) {
		throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadCvPositionFromCvPositionPDFVO(CvPositionPDFVO) not yet implemented.");
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvPositionInVO toCvPositionInVO(final CvPosition entity) {
		return super.toCvPositionInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCvPositionInVO(
			CvPosition source,
			CvPositionInVO target) {
		super.toCvPositionInVO(source, target);
		CvSection section = source.getSection();
		Staff institution = source.getInstitution();
		Staff staff = source.getStaff();
		if (section != null) {
			target.setSectionId(section.getId());
		}
		if (institution != null) {
			target.setInstitutionId(institution.getId());
		}
		if (staff != null) {
			target.setStaffId(staff.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvPositionOutVO toCvPositionOutVO(final CvPosition entity) {
		return super.toCvPositionOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCvPositionOutVO(
			CvPosition source,
			CvPositionOutVO target) {
		super.toCvPositionOutVO(source, target);
		CvSection section = source.getSection();
		Staff institution = source.getInstitution();
		Staff staff = source.getStaff();
		User modifiedUser = source.getModifiedUser();
		if (section != null) {
			target.setSection(this.getCvSectionDao().toCvSectionVO(section));
		}
		if (institution != null) {
			target.setInstitution(this.getStaffDao().toStaffOutVO(institution));
		}
		if (staff != null) {
			target.setStaff(this.getStaffDao().toStaffOutVO(staff));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CvPositionPDFVO toCvPositionPDFVO(final CvPosition entity) {
		return super.toCvPositionPDFVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCvPositionPDFVO(
			CvPosition source,
			CvPositionPDFVO target) {
		super.toCvPositionPDFVO(source, target);
		CvSection section = source.getSection();
		if (section != null) {
			target.setSection(this.getCvSectionDao().toCvSectionVO(section));
		}
		StringBuilder sb = new StringBuilder(source.getTitle());
		Date start = source.getStart();
		Date stop = source.getStop();
		DateFormat cvPositionDateFormat = Settings.getSimpleDateFormat(CVPDFSettingCodes.POSITION_DATE_PATTERN, Bundle.CV_PDF, CVPDFDefaultSettings.POSITION_DATE_PATTERN,
				Locales.CV_PDF);
		if (start != null && stop != null) {
			sb.append(L10nUtil.getCVPDFLabel(Locales.CV_PDF, CVPDFLabelCodes.POSITION_FROM_TO, CVPDFDefaultSettings.POSITION_FROM_TO_LABEL, cvPositionDateFormat.format(start),
					cvPositionDateFormat.format(stop)));
		} else if (start != null && stop == null) {
			// localization!
			sb.append(L10nUtil.getCVPDFLabel(Locales.CV_PDF, CVPDFLabelCodes.POSITION_FROM, CVPDFDefaultSettings.POSITION_FROM_LABEL, cvPositionDateFormat.format(start)));
		} else if (start == null && stop != null) {
			sb.append(L10nUtil.getCVPDFLabel(Locales.CV_PDF, CVPDFLabelCodes.POSITION_TO, CVPDFDefaultSettings.POSITION_TO_LABEL, cvPositionDateFormat.format(stop)));
		} else {
		}
		target.setLabel1(sb.toString());
		Staff institution = source.getInstitution();
		if (institution != null) {
			target.setLabel2(ServiceUtil.getCvStaffPathString(this.getStaffDao().toStaffOutVO(institution,
					Settings.getInt(CVPDFSettingCodes.GRAPH_MAX_STAFF_INSTANCES, Bundle.CV_PDF, CVPDFDefaultSettings.GRAPH_MAX_STAFF_INSTANCES))));
		}
		if (source.isShowCommentCv()) {
			String comment = source.getComment();
			if (comment != null && comment.length() > 0) {
				target.setLabel3(comment);
			}
		}
		target.setCourseParticipation(false);
	}
}