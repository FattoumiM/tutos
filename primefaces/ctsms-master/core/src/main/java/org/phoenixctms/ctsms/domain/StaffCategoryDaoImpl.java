// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.StaffCategoryVO;

/**
 * @see StaffCategory
 */
public class StaffCategoryDaoImpl
		extends StaffCategoryDaoBase {

	@Override
	protected Collection<StaffCategory> handleFindByPersonOrganisationId(
			Boolean person, Boolean organisation, Long categoryId) throws Exception {
		org.hibernate.Criteria categoryCriteria = this.getSession().createCriteria(StaffCategory.class);
		categoryCriteria.setCacheable(true);
		if (person != null) {
			if (categoryId != null) {
				categoryCriteria.add(Restrictions.or(Restrictions.eq("person", person.booleanValue()), Restrictions.idEq(categoryId.longValue())));
			} else {
				categoryCriteria.add(Restrictions.eq("person", person.booleanValue()));
			}
		}
		if (organisation != null) {
			if (categoryId != null) {
				categoryCriteria.add(Restrictions.or(Restrictions.eq("organisation", organisation.booleanValue()), Restrictions.idEq(categoryId.longValue())));
			} else {
				categoryCriteria.add(Restrictions.eq("organisation", organisation.booleanValue()));
			}
		}
		return categoryCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private StaffCategory loadStaffCategoryFromStaffCategoryVO(StaffCategoryVO staffCategoryVO) {
		StaffCategory staffCategory = null;
		Long id = staffCategoryVO.getId();
		if (id != null) {
			staffCategory = this.load(id);
		}
		if (staffCategory == null) {
			staffCategory = StaffCategory.Factory.newInstance();
		}
		return staffCategory;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffCategory staffCategoryVOToEntity(StaffCategoryVO staffCategoryVO) {
		StaffCategory entity = this.loadStaffCategoryFromStaffCategoryVO(staffCategoryVO);
		this.staffCategoryVOToEntity(staffCategoryVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void staffCategoryVOToEntity(
			StaffCategoryVO source,
			StaffCategory target,
			boolean copyIfNull) {
		super.staffCategoryVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public StaffCategoryVO toStaffCategoryVO(final StaffCategory entity) {
		return super.toStaffCategoryVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toStaffCategoryVO(
			StaffCategory source,
			StaffCategoryVO target) {
		super.toStaffCategoryVO(source, target);
		target.setName(L10nUtil.getStaffCategoryName(Locales.USER, source.getNameL10nKey()));
	}
}