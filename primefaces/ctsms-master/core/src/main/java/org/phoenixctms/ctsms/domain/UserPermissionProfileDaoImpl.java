// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.PermissionProfile;
import org.phoenixctms.ctsms.enumeration.PermissionProfileGroup;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.PermissionProfileGrouping;
import org.phoenixctms.ctsms.vo.PermissionProfileVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.UserPermissionProfileInVO;
import org.phoenixctms.ctsms.vo.UserPermissionProfileOutVO;

/**
 * @see UserPermissionProfile
 */
public class UserPermissionProfileDaoImpl
		extends UserPermissionProfileDaoBase {

	private org.hibernate.Criteria createUserPermissionProfileCriteria() {
		org.hibernate.Criteria userPermissionProfileCritria = this.getSession().createCriteria(UserPermissionProfile.class);
		return userPermissionProfileCritria;
	}

	@Override
	protected Collection<UserPermissionProfile> handleFindByUserProfileGroup(
			Long userId, PermissionProfile profile, PermissionProfileGroup profileGroup, Boolean active)
			throws Exception {
		org.hibernate.Criteria userPermissionProfileCritria = createUserPermissionProfileCriteria();
		if (userId != null) {
			userPermissionProfileCritria.add(Restrictions.eq("user.id", userId.longValue()));
		}
		if (profile != null) {
			userPermissionProfileCritria.add(Restrictions.eq("profile", profile));
		}
		if (profileGroup != null) {
			userPermissionProfileCritria.add(Restrictions.in("profile", PermissionProfileGrouping.getProfilesFromPermissionProfileGroup(profileGroup)));
		}
		if (active != null) {
			userPermissionProfileCritria.add(Restrictions.eq("active", active.booleanValue()));
		}
		return userPermissionProfileCritria.list();
	}

	@Override
	protected long handleGetCount(
			Long userId, PermissionProfile profile, PermissionProfileGroup profileGroup, Boolean active)
			throws Exception {
		org.hibernate.Criteria userPermissionProfileCritria = createUserPermissionProfileCriteria();
		if (userId != null) {
			userPermissionProfileCritria.add(Restrictions.eq("user.id", userId.longValue()));
		}
		if (profile != null) {
			userPermissionProfileCritria.add(Restrictions.eq("profile", profile));
		}
		if (profileGroup != null) {
			userPermissionProfileCritria.add(Restrictions.in("profile", PermissionProfileGrouping.getProfilesFromPermissionProfileGroup(profileGroup)));
		}
		if (active != null) {
			userPermissionProfileCritria.add(Restrictions.eq("active", active.booleanValue()));
		}
		return (Long) userPermissionProfileCritria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private UserPermissionProfile loadUserPermissionProfileFromUserPermissionProfileInVO(UserPermissionProfileInVO userPermissionProfileInVO) {
		UserPermissionProfile userPermissionProfile = null;
		Long id = userPermissionProfileInVO.getId();
		if (id != null) {
			userPermissionProfile = this.load(id);
		}
		if (userPermissionProfile == null) {
			userPermissionProfile = UserPermissionProfile.Factory.newInstance();
		}
		return userPermissionProfile;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private UserPermissionProfile loadUserPermissionProfileFromUserPermissionProfileOutVO(UserPermissionProfileOutVO userPermissionProfileOutVO) {
		UserPermissionProfile userPermissionProfile = this.load(userPermissionProfileOutVO.getId());
		if (userPermissionProfile == null) {
			userPermissionProfile = UserPermissionProfile.Factory.newInstance();
		}
		return userPermissionProfile;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public UserPermissionProfileInVO toUserPermissionProfileInVO(final UserPermissionProfile entity) {
		return super.toUserPermissionProfileInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toUserPermissionProfileInVO(
			UserPermissionProfile source,
			UserPermissionProfileInVO target) {
		super.toUserPermissionProfileInVO(source, target);
		User user = source.getUser();
		if (user != null) {
			target.setUserId(user.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public UserPermissionProfileOutVO toUserPermissionProfileOutVO(final UserPermissionProfile entity) {
		return super.toUserPermissionProfileOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toUserPermissionProfileOutVO(
			UserPermissionProfile source,
			UserPermissionProfileOutVO target) {
		super.toUserPermissionProfileOutVO(source, target);
		User user = source.getUser();
		User modifiedUser = source.getModifiedUser();
		if (user != null) {
			target.setUser(this.getUserDao().toUserOutVO(user));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setProfile(L10nUtil.createPermissionProfileVO(Locales.USER, source.getProfile()));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public UserPermissionProfile userPermissionProfileInVOToEntity(UserPermissionProfileInVO userPermissionProfileInVO) {
		UserPermissionProfile entity = this.loadUserPermissionProfileFromUserPermissionProfileInVO(userPermissionProfileInVO);
		this.userPermissionProfileInVOToEntity(userPermissionProfileInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void userPermissionProfileInVOToEntity(
			UserPermissionProfileInVO source,
			UserPermissionProfile target,
			boolean copyIfNull) {
		super.userPermissionProfileInVOToEntity(source, target, copyIfNull);
		Long userId = source.getUserId();
		if (userId != null) {
			User user = this.getUserDao().load(userId);
			target.setUser(user);
			user.addPermissionProfiles(target);
		} else if (copyIfNull) {
			User user = target.getUser();
			target.setUser(null);
			if (user != null) {
				user.removePermissionProfiles(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public UserPermissionProfile userPermissionProfileOutVOToEntity(UserPermissionProfileOutVO userPermissionProfileOutVO) {
		UserPermissionProfile entity = this.loadUserPermissionProfileFromUserPermissionProfileOutVO(userPermissionProfileOutVO);
		this.userPermissionProfileOutVOToEntity(userPermissionProfileOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void userPermissionProfileOutVOToEntity(
			UserPermissionProfileOutVO source,
			UserPermissionProfile target,
			boolean copyIfNull) {
		super.userPermissionProfileOutVOToEntity(source, target, copyIfNull);
		UserOutVO userVO = source.getUser();
		PermissionProfileVO profileVO = source.getProfile();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (userVO != null) {
			User user = this.getUserDao().userOutVOToEntity(userVO);
			target.setUser(user);
			user.addPermissionProfiles(target);
		} else if (copyIfNull) {
			User user = target.getUser();
			target.setUser(null);
			if (user != null) {
				user.removePermissionProfiles(target);
			}
		}
		if (profileVO != null) {
			target.setProfile(profileVO.getProfile());
		} else if (copyIfNull) {
			target.setProfile(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}
}