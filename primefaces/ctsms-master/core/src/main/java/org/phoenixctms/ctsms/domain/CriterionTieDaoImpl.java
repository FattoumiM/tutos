// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import org.hibernate.criterion.Restrictions;

import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.CriterionTieVO;

/**
 * @see CriterionTie
 */
public class CriterionTieDaoImpl
		extends CriterionTieDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	public CriterionTie criterionTieVOToEntity(CriterionTieVO criterionTieVO) {
		CriterionTie entity = this.loadCriterionTieFromCriterionTieVO(criterionTieVO);
		this.criterionTieVOToEntity(criterionTieVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criterionTieVOToEntity(
			CriterionTieVO source,
			CriterionTie target,
			boolean copyIfNull) {
		super.criterionTieVOToEntity(source, target, copyIfNull);
	}

	@Override
	protected CriterionTie handleFindByTie(
			org.phoenixctms.ctsms.enumeration.CriterionTie tie) throws Exception {
		if (tie != null) {
			org.hibernate.Criteria tieCriteria = this.getSession().createCriteria(CriterionTie.class);
			tieCriteria.setCacheable(true);
			tieCriteria.add(Restrictions.eq("tie", tie));
			tieCriteria.setMaxResults(1);
			return (CriterionTie) tieCriteria.uniqueResult();
		} else {
			return null;
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private CriterionTie loadCriterionTieFromCriterionTieVO(CriterionTieVO criterionTieVO) {
		CriterionTie criterionTie = null;
		Long id = criterionTieVO.getId();
		if (id != null) {
			criterionTie = this.load(id);
		}
		if (criterionTie == null) {
			criterionTie = CriterionTie.Factory.newInstance();
		}
		return criterionTie;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriterionTieVO toCriterionTieVO(final CriterionTie entity) {
		return super.toCriterionTieVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriterionTieVO(
			CriterionTie source,
			CriterionTieVO target) {
		super.toCriterionTieVO(source, target);
		target.setName(L10nUtil.getCriterionTieName(Locales.USER, source.getNameL10nKey()));
	}
}