// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.security.CipherText;
import org.phoenixctms.ctsms.security.CryptoUtil;
import org.phoenixctms.ctsms.security.reencrypt.FieldReEncrypter;
import org.phoenixctms.ctsms.security.reencrypt.ReEncrypter;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.util.DefaultMessages;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.MessageCodes;
import org.phoenixctms.ctsms.vo.AddressTypeVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandAddressInVO;
import org.phoenixctms.ctsms.vo.ProbandAddressOutVO;
import org.phoenixctms.ctsms.vo.ProbandOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see ProbandAddress
 */
public class ProbandAddressDaoImpl
		extends ProbandAddressDaoBase {

	private final static Collection<ReEncrypter<ProbandAddress>> RE_ENCRYPTERS = new ArrayList<ReEncrypter<ProbandAddress>>();
	static {
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getCountryNameIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedCountryName();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setCountryNameIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedCountryName(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setCountryNameHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getZipCodeIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedZipCode();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setZipCodeIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedZipCode(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setZipCodeHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getCityNameIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedCityName();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setCityNameIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedCityName(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setCityNameHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getStreetNameIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedStreetName();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setStreetNameIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedStreetName(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setStreetNameHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getHouseNumberIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedHouseNumber();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setHouseNumberIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedHouseNumber(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setHouseNumberHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getEntranceIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedEntrance();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setEntranceIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedEntrance(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setEntranceHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getDoorNumberIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedDoorNumber();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setDoorNumberIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedDoorNumber(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setDoorNumberHash(hash);
			}
		});
		RE_ENCRYPTERS.add(new FieldReEncrypter<ProbandAddress>() {

			@Override
			protected byte[] getIv(ProbandAddress item) {
				return item.getCareOfIv();
			}

			@Override
			protected byte[] getEncrypted(ProbandAddress item) {
				return item.getEncryptedCareOf();
			}

			@Override
			protected void setIv(ProbandAddress item, byte[] iv) {
				item.setCareOfIv(iv);
			}

			@Override
			protected void setEncrypted(ProbandAddress item, byte[] cipherText) {
				item.setEncryptedCareOf(cipherText);
			}

			@Override
			protected void setHash(ProbandAddress item, byte[] hash) {
				item.setCareOfHash(hash);
			}
		});
	}

	@Override
	protected Collection<ReEncrypter<ProbandAddress>> getReEncrypters() {
		return RE_ENCRYPTERS;
	}

	private static String getAddressString(ProbandAddressOutVO address) {
		StringBuilder sb = new StringBuilder();
		if (address != null) {
			if (address.isDecrypted()) {
				StringBuilder zc = new StringBuilder();
				sb.append(CommonUtil.getStreetString(address.getStreetName(), address.getHouseNumber(), address.getEntrance(), address.getDoorNumber()));
				CommonUtil.appendString(zc, address.getZipCode(), null, "?");
				CommonUtil.appendString(zc, address.getCityName(), " ", "?");
				CommonUtil.appendString(sb, zc.toString(), " - ");
			} else {
				sb.append(L10nUtil.getString(MessageCodes.ENCRYPTED_PROBAND_ADDRESS, DefaultMessages.ENCRYPTED_PROBAND_ADDRESS));
			}
		}
		return sb.toString();
	}

	private static String getCivicString(ProbandAddressOutVO address) {
		StringBuilder sb = new StringBuilder();
		if (address != null) {
			if (address.isDecrypted()) {
				StringBuilder zc = new StringBuilder();
				sb.append(CommonUtil.getStreetString(address.getStreetName(), address.getHouseNumber(), null, null));
				CommonUtil.appendString(zc, address.getZipCode(), null, "?");
				CommonUtil.appendString(zc, address.getCityName(), " ", "?");
				CommonUtil.appendString(sb, zc.toString(), ", ");
			} else {
			}
		}
		return sb.toString();
	}

	private org.hibernate.Criteria createAddressCriteria() {
		org.hibernate.Criteria addressCriteria = this.getSession().createCriteria(ProbandAddress.class);
		return addressCriteria;
	}

	@Override
	protected Collection<ProbandAddress> handleFindByProband(Long probandId, Boolean deliver, Boolean afnus, Boolean wireTransfer, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria probandAddressCriteria = createAddressCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ProbandAddress.class, probandAddressCriteria);
		if (probandId != null) {
			probandAddressCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		if (deliver != null) {
			probandAddressCriteria.add(Restrictions.eq("deliver", deliver.booleanValue()));
		}
		if (afnus != null) {
			probandAddressCriteria.add(Restrictions.eq("afnus", afnus.booleanValue()));
		}
		if (wireTransfer != null) {
			probandAddressCriteria.add(Restrictions.eq("wireTransfer", wireTransfer.booleanValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return probandAddressCriteria.list();
	}

	@Override
	protected ProbandAddress handleFindByProbandWireTransfer(Long probandId)
			throws Exception {
		org.hibernate.Criteria probandAddressCriteria = createAddressCriteria();
		probandAddressCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		probandAddressCriteria.add(Restrictions.eq("wireTransfer", true));
		probandAddressCriteria.setMaxResults(1);
		return (ProbandAddress) probandAddressCriteria.uniqueResult();
	}

	@Override
	protected long handleGetCount(Long probandId, Boolean deliver, Boolean afnus, Boolean wireTransfer) throws Exception {
		org.hibernate.Criteria probandAddressCriteria = createAddressCriteria();
		if (probandId != null) {
			probandAddressCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		if (deliver != null) {
			probandAddressCriteria.add(Restrictions.eq("deliver", deliver.booleanValue()));
		}
		if (afnus != null) {
			probandAddressCriteria.add(Restrictions.eq("afnus", afnus.booleanValue()));
		}
		if (wireTransfer != null) {
			probandAddressCriteria.add(Restrictions.eq("wireTransfer", wireTransfer.booleanValue()));
		}
		return (Long) probandAddressCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandAddress loadProbandAddressFromProbandAddressInVO(ProbandAddressInVO probandAddressInVO) {
		ProbandAddress probandAddress = null;
		Long id = probandAddressInVO.getId();
		if (id != null) {
			probandAddress = this.load(id);
		}
		if (probandAddress == null) {
			probandAddress = ProbandAddress.Factory.newInstance();
		}
		return probandAddress;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandAddress loadProbandAddressFromProbandAddressOutVO(ProbandAddressOutVO probandAddressOutVO) {
		ProbandAddress probandAddress = this.load(probandAddressOutVO.getId());
		if (probandAddress == null) {
			probandAddress = ProbandAddress.Factory.newInstance();
		}
		return probandAddress;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandAddress probandAddressInVOToEntity(ProbandAddressInVO probandAddressInVO) {
		ProbandAddress entity = this.loadProbandAddressFromProbandAddressInVO(probandAddressInVO);
		this.probandAddressInVOToEntity(probandAddressInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandAddressInVOToEntity(
			ProbandAddressInVO source,
			ProbandAddress target,
			boolean copyIfNull) {
		super.probandAddressInVOToEntity(source, target, copyIfNull);
		Long typeId = source.getTypeId();
		Long probandId = source.getProbandId();
		if (typeId != null) {
			target.setType(this.getAddressTypeDao().load(typeId));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (probandId != null) {
			Proband proband = this.getProbandDao().load(probandId);
			target.setProband(proband);
			proband.addAddresses(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeAddresses(target);
			}
		}
		try {
			if (copyIfNull || source.getCountryName() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getCountryName());
				target.setCountryNameIv(cipherText.getIv());
				target.setEncryptedCountryName(cipherText.getCipherText());
				target.setCountryNameHash(CryptoUtil.hashForSearch(source.getCountryName()));
			}
			if (copyIfNull || source.getZipCode() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getZipCode());
				target.setZipCodeIv(cipherText.getIv());
				target.setEncryptedZipCode(cipherText.getCipherText());
				target.setZipCodeHash(CryptoUtil.hashForSearch(source.getZipCode()));
			}
			if (copyIfNull || source.getCityName() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getCityName());
				target.setCityNameIv(cipherText.getIv());
				target.setEncryptedCityName(cipherText.getCipherText());
				target.setCityNameHash(CryptoUtil.hashForSearch(source.getCityName()));
			}
			if (copyIfNull || source.getStreetName() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getStreetName());
				target.setStreetNameIv(cipherText.getIv());
				target.setEncryptedStreetName(cipherText.getCipherText());
				target.setStreetNameHash(CryptoUtil.hashForSearch(source.getStreetName()));
			}
			if (copyIfNull || source.getHouseNumber() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getHouseNumber());
				target.setHouseNumberIv(cipherText.getIv());
				target.setEncryptedHouseNumber(cipherText.getCipherText());
				target.setHouseNumberHash(CryptoUtil.hashForSearch(source.getHouseNumber()));
			}
			if (copyIfNull || source.getEntrance() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getEntrance());
				target.setEntranceIv(cipherText.getIv());
				target.setEncryptedEntrance(cipherText.getCipherText());
				target.setEntranceHash(CryptoUtil.hashForSearch(source.getEntrance()));
			}
			if (copyIfNull || source.getDoorNumber() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getDoorNumber());
				target.setDoorNumberIv(cipherText.getIv());
				target.setEncryptedDoorNumber(cipherText.getCipherText());
				target.setDoorNumberHash(CryptoUtil.hashForSearch(source.getDoorNumber()));
			}
			if (copyIfNull || source.getCareOf() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getCareOf());
				target.setCareOfIv(cipherText.getIv());
				target.setEncryptedCareOf(cipherText.getCipherText());
				target.setCareOfHash(CryptoUtil.hashForSearch(source.getCareOf()));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandAddress probandAddressOutVOToEntity(ProbandAddressOutVO probandAddressOutVO) {
		ProbandAddress entity = this.loadProbandAddressFromProbandAddressOutVO(probandAddressOutVO);
		this.probandAddressOutVOToEntity(probandAddressOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandAddressOutVOToEntity(
			ProbandAddressOutVO source,
			ProbandAddress target,
			boolean copyIfNull) {
		super.probandAddressOutVOToEntity(source, target, copyIfNull);
		AddressTypeVO typeVO = source.getType();
		ProbandOutVO probandVO = source.getProband();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (typeVO != null) {
			target.setType(this.getAddressTypeDao().addressTypeVOToEntity(typeVO));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (probandVO != null) {
			Proband proband = this.getProbandDao().probandOutVOToEntity(probandVO);
			target.setProband(proband);
			proband.addAddresses(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeAddresses(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		try {
			if (copyIfNull || source.getCountryName() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getCountryName());
				target.setCountryNameIv(cipherText.getIv());
				target.setEncryptedCountryName(cipherText.getCipherText());
				target.setCountryNameHash(CryptoUtil.hashForSearch(source.getCountryName()));
			}
			if (copyIfNull || source.getZipCode() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getZipCode());
				target.setZipCodeIv(cipherText.getIv());
				target.setEncryptedZipCode(cipherText.getCipherText());
				target.setZipCodeHash(CryptoUtil.hashForSearch(source.getZipCode()));
			}
			if (copyIfNull || source.getCityName() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getCityName());
				target.setCityNameIv(cipherText.getIv());
				target.setEncryptedCityName(cipherText.getCipherText());
				target.setCityNameHash(CryptoUtil.hashForSearch(source.getCityName()));
			}
			if (copyIfNull || source.getStreetName() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getStreetName());
				target.setStreetNameIv(cipherText.getIv());
				target.setEncryptedStreetName(cipherText.getCipherText());
				target.setStreetNameHash(CryptoUtil.hashForSearch(source.getStreetName()));
			}
			if (copyIfNull || source.getHouseNumber() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getHouseNumber());
				target.setHouseNumberIv(cipherText.getIv());
				target.setEncryptedHouseNumber(cipherText.getCipherText());
				target.setHouseNumberHash(CryptoUtil.hashForSearch(source.getHouseNumber()));
			}
			if (copyIfNull || source.getEntrance() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getEntrance());
				target.setEntranceIv(cipherText.getIv());
				target.setEncryptedEntrance(cipherText.getCipherText());
				target.setEntranceHash(CryptoUtil.hashForSearch(source.getEntrance()));
			}
			if (copyIfNull || source.getDoorNumber() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getDoorNumber());
				target.setDoorNumberIv(cipherText.getIv());
				target.setEncryptedDoorNumber(cipherText.getCipherText());
				target.setDoorNumberHash(CryptoUtil.hashForSearch(source.getDoorNumber()));
			}
			if (copyIfNull || source.getCareOf() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getCareOf());
				target.setCareOfIv(cipherText.getIv());
				target.setEncryptedCareOf(cipherText.getCipherText());
				target.setCareOfHash(CryptoUtil.hashForSearch(source.getCareOf()));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandAddressInVO toProbandAddressInVO(final ProbandAddress entity) {
		return super.toProbandAddressInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandAddressInVO(
			ProbandAddress source,
			ProbandAddressInVO target) {
		super.toProbandAddressInVO(source, target);
		AddressType type = source.getType();
		Proband proband = source.getProband();
		if (type != null) {
			target.setTypeId(type.getId());
		}
		if (proband != null) {
			target.setProbandId(proband.getId());
		}
		try {
			target.setCountryName((String) CryptoUtil.decryptValue(source.getCountryNameIv(), source.getEncryptedCountryName()));
			target.setZipCode((String) CryptoUtil.decryptValue(source.getZipCodeIv(), source.getEncryptedZipCode()));
			target.setCityName((String) CryptoUtil.decryptValue(source.getCityNameIv(), source.getEncryptedCityName()));
			target.setStreetName((String) CryptoUtil.decryptValue(source.getStreetNameIv(), source.getEncryptedStreetName()));
			target.setHouseNumber((String) CryptoUtil.decryptValue(source.getHouseNumberIv(), source.getEncryptedHouseNumber()));
			target.setEntrance((String) CryptoUtil.decryptValue(source.getEntranceIv(), source.getEncryptedEntrance()));
			target.setDoorNumber((String) CryptoUtil.decryptValue(source.getDoorNumberIv(), source.getEncryptedDoorNumber()));
			target.setCareOf((String) CryptoUtil.decryptValue(source.getCareOfIv(), source.getEncryptedCareOf()));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandAddressOutVO toProbandAddressOutVO(final ProbandAddress entity) {
		return super.toProbandAddressOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandAddressOutVO(
			ProbandAddress source,
			ProbandAddressOutVO target) {
		super.toProbandAddressOutVO(source, target);
		AddressType type = source.getType();
		Proband proband = source.getProband();
		User modifiedUser = source.getModifiedUser();
		if (type != null) {
			target.setType(this.getAddressTypeDao().toAddressTypeVO(type));
		}
		if (proband != null) {
			target.setProband(this.getProbandDao().toProbandOutVO(proband));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		try {
			if (!CoreUtil.isPassDecryption()) {
				throw new Exception();
			}
			target.setCountryName((String) CryptoUtil.decryptValue(source.getCountryNameIv(), source.getEncryptedCountryName()));
			target.setZipCode((String) CryptoUtil.decryptValue(source.getZipCodeIv(), source.getEncryptedZipCode()));
			target.setCityName((String) CryptoUtil.decryptValue(source.getCityNameIv(), source.getEncryptedCityName()));
			target.setStreetName((String) CryptoUtil.decryptValue(source.getStreetNameIv(), source.getEncryptedStreetName()));
			target.setHouseNumber((String) CryptoUtil.decryptValue(source.getHouseNumberIv(), source.getEncryptedHouseNumber()));
			target.setEntrance((String) CryptoUtil.decryptValue(source.getEntranceIv(), source.getEncryptedEntrance()));
			target.setDoorNumber((String) CryptoUtil.decryptValue(source.getDoorNumberIv(), source.getEncryptedDoorNumber()));
			target.setCareOf((String) CryptoUtil.decryptValue(source.getCareOfIv(), source.getEncryptedCareOf()));
			target.setDecrypted(true);
		} catch (Exception e) {
			target.setCountryName(null);
			target.setZipCode(null);
			target.setCityName(null);
			target.setStreetName(null);
			target.setHouseNumber(null);
			target.setEntrance(null);
			target.setDoorNumber(null);
			target.setCareOf(null);
			target.setDecrypted(false);
		}
		target.setName(getAddressString(target));
		target.setCivicName(getCivicString(target));
	}
}