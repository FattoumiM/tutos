// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.ContactDetailTypeVO;

/**
 * @see ContactDetailType
 */
public class ContactDetailTypeDaoImpl
		extends ContactDetailTypeDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	public ContactDetailType contactDetailTypeVOToEntity(ContactDetailTypeVO contactDetailTypeVO) {
		ContactDetailType entity = this.loadContactDetailTypeFromContactDetailTypeVO(contactDetailTypeVO);
		this.contactDetailTypeVOToEntity(contactDetailTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void contactDetailTypeVOToEntity(
			ContactDetailTypeVO source,
			ContactDetailType target,
			boolean copyIfNull) {
		super.contactDetailTypeVOToEntity(source, target, copyIfNull);
	}

	@Override
	protected Collection<ContactDetailType> handleFindByStaffProbandAnimalId(
			Boolean staff, Boolean proband, Boolean animal, Long typeId) throws Exception {
		org.hibernate.Criteria typeCriteria = this.getSession().createCriteria(ContactDetailType.class);
		typeCriteria.setCacheable(true);
		if (staff != null) {
			if (typeId != null) {
				typeCriteria.add(Restrictions.or(Restrictions.eq("staff", staff.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				typeCriteria.add(Restrictions.eq("staff", staff.booleanValue()));
			}
		}
		if (proband != null) {
			if (typeId != null) {
				typeCriteria.add(Restrictions.or(Restrictions.eq("proband", proband.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				typeCriteria.add(Restrictions.eq("proband", proband.booleanValue()));
			}
		}
		if (animal != null) {
			if (typeId != null) {
				typeCriteria.add(Restrictions.or(Restrictions.eq("animal", animal.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				typeCriteria.add(Restrictions.eq("animal", animal.booleanValue()));
			}
		}
		return typeCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ContactDetailType loadContactDetailTypeFromContactDetailTypeVO(ContactDetailTypeVO contactDetailTypeVO) {
		ContactDetailType contactDetailType = null;
		Long id = contactDetailTypeVO.getId();
		if (id != null) {
			contactDetailType = this.load(id);
		}
		if (contactDetailType == null) {
			contactDetailType = ContactDetailType.Factory.newInstance();
		}
		return contactDetailType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ContactDetailTypeVO toContactDetailTypeVO(final ContactDetailType entity) {
		return super.toContactDetailTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toContactDetailTypeVO(
			ContactDetailType source,
			ContactDetailTypeVO target) {
		super.toContactDetailTypeVO(source, target);
		target.setName(L10nUtil.getContactDetailTypeName(Locales.USER, source.getNameL10nKey()));
	}
}