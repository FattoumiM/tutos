// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.ProbandTagVO;

/**
 * @see ProbandTag
 */
public class ProbandTagDaoImpl
		extends ProbandTagDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<ProbandTag> handleFindByPersonAnimalIdExcel(Boolean person, Boolean animal, Long tagId, Boolean excel) {
		org.hibernate.Criteria probandTagCriteria = this.getSession().createCriteria(ProbandTag.class);
		probandTagCriteria.setCacheable(true);
		if (excel != null) {
			probandTagCriteria.add(Restrictions.eq("excel", excel.booleanValue()));
		}
		if (person != null) {
			if (tagId != null) {
				probandTagCriteria.add(Restrictions.or(Restrictions.eq("person", person.booleanValue()), Restrictions.idEq(tagId.longValue())));
			} else {
				probandTagCriteria.add(Restrictions.eq("person", person.booleanValue()));
			}
		}
		if (animal != null) {
			if (tagId != null) {
				probandTagCriteria.add(Restrictions.or(Restrictions.eq("animal", animal.booleanValue()), Restrictions.idEq(tagId.longValue())));
			} else {
				probandTagCriteria.add(Restrictions.eq("animal", animal.booleanValue()));
			}
		}
		return probandTagCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ProbandTag loadProbandTagFromProbandTagVO(ProbandTagVO probandTagVO) {
		ProbandTag probandTag = null;
		Long id = probandTagVO.getId();
		if (id != null) {
			probandTag = this.load(id);
		}
		if (probandTag == null) {
			probandTag = ProbandTag.Factory.newInstance();
		}
		return probandTag;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandTag probandTagVOToEntity(ProbandTagVO probandTagVO) {
		ProbandTag entity = this.loadProbandTagFromProbandTagVO(probandTagVO);
		this.probandTagVOToEntity(probandTagVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void probandTagVOToEntity(
			ProbandTagVO source,
			ProbandTag target,
			boolean copyIfNull) {
		super.probandTagVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ProbandTagVO toProbandTagVO(final ProbandTag entity) {
		return super.toProbandTagVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toProbandTagVO(
			ProbandTag source,
			ProbandTagVO target) {
		super.toProbandTagVO(source, target);
		target.setName(L10nUtil.getProbandTagName(Locales.USER, source.getNameL10nKey()));
	}
}