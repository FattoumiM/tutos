// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.ZipVO;

/**
 * @see Zip
 */
public class ZipDaoImpl
		extends ZipDaoBase {

	private static void applyZipCriterions(org.hibernate.Criteria zipCriteria, String countryNameInfix,
			String zipCodePrefix, String cityNameInfix) {
		CategoryCriterion.applyAnd(zipCriteria,
				new CategoryCriterion(countryNameInfix, "countryName", MatchMode.ANYWHERE),
				new CategoryCriterion(zipCodePrefix, "zipCode", MatchMode.START),
				new CategoryCriterion(cityNameInfix, "cityName", MatchMode.ANYWHERE));
	}

	private org.hibernate.Criteria createZipCriteria() {
		org.hibernate.Criteria zipCriteria = this.getSession().createCriteria(Zip.class);
		zipCriteria.setCacheable(true);
		return zipCriteria;
	}

	@Override
	protected Collection<String> handleFindCityNames(String countryNameInfix,
			String zipCodePrefix, String cityNameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria zipCriteria = createZipCriteria();
		applyZipCriterions(zipCriteria, countryNameInfix, zipCodePrefix, cityNameInfix);
		zipCriteria.add(Restrictions.not(Restrictions.or(Restrictions.eq("cityName", ""), Restrictions.isNull("cityName"))));
		zipCriteria.addOrder(Order.asc("cityName"));
		zipCriteria.setProjection(Projections.distinct(Projections.property("cityName")));
		CriteriaUtil.applyLimit(limit,
				Settings.getIntNullable(SettingCodes.CITY_NAME_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS, DefaultSettings.CITY_NAME_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT),
				zipCriteria);
		return zipCriteria.list();
	}

	@Override
	protected Collection<String> handleFindZipCodes(String countryNameInfix,
			String zipCodePrefix, String cityNameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria zipCriteria = createZipCriteria();
		applyZipCriterions(zipCriteria, countryNameInfix, zipCodePrefix, cityNameInfix);
		zipCriteria.add(Restrictions.not(Restrictions.or(Restrictions.eq("zipCode", ""), Restrictions.isNull("zipCode"))));
		zipCriteria.addOrder(Order.asc("zipCode"));
		zipCriteria.setProjection(Projections.distinct(Projections.property("zipCode")));
		CriteriaUtil.applyLimit(limit,
				Settings.getIntNullable(SettingCodes.ZIP_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS, DefaultSettings.ZIP_CODE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT),
				zipCriteria);
		return zipCriteria.list();
	}

	@Override
	protected Collection<Zip> handleFindZips(String countryNameInfix,
			String zipCodePrefix, String cityNameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria zipCriteria = createZipCriteria();
		applyZipCriterions(zipCriteria, countryNameInfix, zipCodePrefix, cityNameInfix);
		zipCriteria.addOrder(Order.asc("countryName"));
		zipCriteria.addOrder(Order.asc("cityName"));
		zipCriteria.addOrder(Order.asc("zipCode"));
		CriteriaUtil.applyLimit(limit,
				Settings.getIntNullable(SettingCodes.ZIP_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS, DefaultSettings.ZIP_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), zipCriteria);
		return zipCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Zip loadZipFromZipVO(ZipVO zipVO) {
		Zip zip = null;
		Long id = zipVO.getId();
		if (id != null) {
			zip = this.load(id);
		}
		if (zip == null) {
			zip = Zip.Factory.newInstance();
		}
		return zip;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ZipVO toZipVO(final Zip entity) {
		return super.toZipVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toZipVO(
			Zip source,
			ZipVO target) {
		super.toZipVO(source, target);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Zip zipVOToEntity(ZipVO zipVO) {
		Zip entity = this.loadZipFromZipVO(zipVO);
		this.zipVOToEntity(zipVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void zipVOToEntity(
			ZipVO source,
			Zip target,
			boolean copyIfNull) {
		super.zipVOToEntity(source, target, copyIfNull);
	}
}