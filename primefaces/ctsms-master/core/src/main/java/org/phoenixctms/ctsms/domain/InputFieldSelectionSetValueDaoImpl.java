// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;
import java.util.HashMap;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.InputFieldType;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.util.ServiceUtil;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.InputFieldSelectionSetValueInVO;
import org.phoenixctms.ctsms.vo.InputFieldSelectionSetValueJsonVO;
import org.phoenixctms.ctsms.vo.InputFieldSelectionSetValueOutVO;
import org.phoenixctms.ctsms.vo.LightInputFieldSelectionSetValueOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vocycle.InputFieldSelectionSetValueGraph;

/**
 * @see InputFieldSelectionSetValue
 */
public class InputFieldSelectionSetValueDaoImpl
		extends InputFieldSelectionSetValueDaoBase {

	private static void applySortOrders(org.hibernate.Criteria selectionSetValueCriteria) {
		if (selectionSetValueCriteria != null) {
			selectionSetValueCriteria.addOrder(Order.asc("field"));
			selectionSetValueCriteria.addOrder(Order.asc("localized"));
			selectionSetValueCriteria.addOrder(Order.asc("nameL10nKey"));
		}
	}

	private static void applyUsedByCriterions(org.hibernate.Criteria selectionSetValueCriteria, String nameInfix, String inputFieldProperty) {
		if (selectionSetValueCriteria != null) {
			org.hibernate.Criteria fieldCriteria = selectionSetValueCriteria.createCriteria("field", "inputField", CriteriaSpecification.INNER_JOIN);
			if (!CommonUtil.isEmptyString(inputFieldProperty)) {
				fieldCriteria.add(Restrictions.not(Restrictions.isEmpty(inputFieldProperty)));
			}
			if (!CommonUtil.isEmptyString(nameInfix)) {
				selectionSetValueCriteria.add(Restrictions.or(
						(new CategoryCriterion(nameInfix, "inputField.nameL10nKey", MatchMode.ANYWHERE)).getRestriction(),
						(new CategoryCriterion(nameInfix, "nameL10nKey", MatchMode.ANYWHERE)).getRestriction()));
			}
		}
	}

	private org.hibernate.Criteria createSelectionSetValueCriteria() {
		org.hibernate.Criteria selectionSetValueCriteria = this.getSession().createCriteria(InputFieldSelectionSetValue.class);
		return selectionSetValueCriteria;
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindByFieldNameL10nKeyLocalized(
			Long fieldId, String nameL10nKey, boolean localized)
			throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (nameL10nKey != null) {
			selectionSetValueCriteria.add(Restrictions.eq("nameL10nKey", nameL10nKey));
		}
		selectionSetValueCriteria.add(Restrictions.eq("localized", localized));
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindByFieldPreset(
			Long fieldId, Boolean preset, PSFVO psf) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(InputFieldSelectionSetValue.class, selectionSetValueCriteria);
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (preset != null) {
			selectionSetValueCriteria.add(Restrictions.eq("preset", preset.booleanValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindByFieldValue(
			Long fieldId, String value) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (value != null) {
			selectionSetValueCriteria.add(Restrictions.eq("value", value));
		}
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindByStrokesId(
			Long fieldId, String strokesId) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (strokesId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("strokesId", strokesId));
		}
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindSelectionSetValues(Long fieldId, String nameInfix, Integer limit)
			throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		CategoryCriterion.apply(selectionSetValueCriteria, new CategoryCriterion(nameInfix, "nameL10nKey", MatchMode.ANYWHERE));
		selectionSetValueCriteria.addOrder(Order.asc("nameL10nKey"));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindUsedByEcrfFieldsSorted() throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		applyUsedByCriterions(selectionSetValueCriteria, null, "ecrfFields");
		applySortOrders(selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindUsedByEcrfFieldsSorted(String nameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		applyUsedByCriterions(selectionSetValueCriteria, nameInfix, "ecrfFields");
		applySortOrders(selectionSetValueCriteria);
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindUsedByInquiriesSorted() throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		applyUsedByCriterions(selectionSetValueCriteria, null, "inquiries");
		applySortOrders(selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindUsedByInquiriesSorted(String nameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		applyUsedByCriterions(selectionSetValueCriteria, nameInfix, "inquiries");
		applySortOrders(selectionSetValueCriteria);
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindUsedByListEntryTagsSorted() throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		applyUsedByCriterions(selectionSetValueCriteria, null, "listEntryTags");
		applySortOrders(selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<InputFieldSelectionSetValue> handleFindUsedByListEntryTagsSorted(String nameInfix, Integer limit) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		applyUsedByCriterions(selectionSetValueCriteria, nameInfix, "listEntryTags");
		applySortOrders(selectionSetValueCriteria);
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INPUT_FIELD_SELECTION_SET_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected Collection<String> handleFindValues(Long fieldId, String valueInfix, Integer limit)
			throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		CategoryCriterion.apply(selectionSetValueCriteria, new CategoryCriterion(valueInfix, "value", MatchMode.ANYWHERE));
		selectionSetValueCriteria.addOrder(Order.asc("value"));
		selectionSetValueCriteria.setProjection(Projections.distinct(Projections.property("value")));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.INPUT_FIELD_SELECTION_SET_VALUE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.INPUT_FIELD_SELECTION_SET_VALUE_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), selectionSetValueCriteria);
		return selectionSetValueCriteria.list();
	}

	@Override
	protected long handleGetCount(Long fieldId) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		return (Long) selectionSetValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long fieldId, Boolean preset) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (preset != null) {
			selectionSetValueCriteria.add(Restrictions.eq("preset", preset.booleanValue()));
		}
		return (Long) selectionSetValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long fieldId, String value) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		if (fieldId != null) {
			selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		}
		if (value != null) {
			selectionSetValueCriteria.add(Restrictions.eq("value", value));
		}
		return (Long) selectionSetValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected InputFieldSelectionSetValue handleGetFieldPreset(
			Long fieldId) throws Exception {
		org.hibernate.Criteria selectionSetValueCriteria = createSelectionSetValueCriteria();
		selectionSetValueCriteria.add(Restrictions.eq("field.id", fieldId.longValue()));
		selectionSetValueCriteria.add(Restrictions.eq("preset", true));
		selectionSetValueCriteria.addOrder(Order.asc("id"));
		selectionSetValueCriteria.setMaxResults(1);
		return (InputFieldSelectionSetValue) selectionSetValueCriteria.uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValue inputFieldSelectionSetValueInVOToEntity(InputFieldSelectionSetValueInVO inputFieldSelectionSetValueInVO) {
		InputFieldSelectionSetValue entity = this.loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueInVO(inputFieldSelectionSetValueInVO);
		this.inputFieldSelectionSetValueInVOToEntity(inputFieldSelectionSetValueInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inputFieldSelectionSetValueInVOToEntity(
			InputFieldSelectionSetValueInVO source,
			InputFieldSelectionSetValue target,
			boolean copyIfNull) {
		super.inputFieldSelectionSetValueInVOToEntity(source, target, copyIfNull);
		Long fieldId = source.getFieldId();
		InputField field = null;
		if (fieldId != null) {
			field = this.getInputFieldDao().load(fieldId);
			target.setField(field);
			field.addSelectionSetValues(target);
		} else if (copyIfNull) {
			field = target.getField();
			target.setField(null);
			if (field != null) {
				field.removeSelectionSetValues(target);
			}
		}
		target.setLocalized(false);
		target.setNameL10nKey(source.getName());
		if (copyIfNull || source.getInkRegions() != null) {
			target.setInkRegion(source.getInkRegions());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValue inputFieldSelectionSetValueJsonVOToEntity(InputFieldSelectionSetValueJsonVO inputFieldSelectionSetValueJsonVO) {
		InputFieldSelectionSetValue entity = this.loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueJsonVO(inputFieldSelectionSetValueJsonVO);
		this.inputFieldSelectionSetValueJsonVOToEntity(inputFieldSelectionSetValueJsonVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inputFieldSelectionSetValueJsonVOToEntity(
			InputFieldSelectionSetValueJsonVO source,
			InputFieldSelectionSetValue target,
			boolean copyIfNull) {
		super.inputFieldSelectionSetValueJsonVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValue inputFieldSelectionSetValueOutVOToEntity(InputFieldSelectionSetValueOutVO inputFieldSelectionSetValueOutVO) {
		InputFieldSelectionSetValue entity = this.loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueOutVO(inputFieldSelectionSetValueOutVO);
		this.inputFieldSelectionSetValueOutVOToEntity(inputFieldSelectionSetValueOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inputFieldSelectionSetValueOutVOToEntity(
			InputFieldSelectionSetValueOutVO source,
			InputFieldSelectionSetValue target,
			boolean copyIfNull) {
		super.inputFieldSelectionSetValueOutVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValue lightInputFieldSelectionSetValueOutVOToEntity(LightInputFieldSelectionSetValueOutVO lightInputFieldSelectionSetValueOutVO) {
		InputFieldSelectionSetValue entity = this.loadInputFieldSelectionSetValueFromLightInputFieldSelectionSetValueOutVO(lightInputFieldSelectionSetValueOutVO);
		this.lightInputFieldSelectionSetValueOutVOToEntity(lightInputFieldSelectionSetValueOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void lightInputFieldSelectionSetValueOutVOToEntity(
			LightInputFieldSelectionSetValueOutVO source,
			InputFieldSelectionSetValue target,
			boolean copyIfNull) {
		super.lightInputFieldSelectionSetValueOutVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InputFieldSelectionSetValue loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueInVO(InputFieldSelectionSetValueInVO inputFieldSelectionSetValueInVO) {
		InputFieldSelectionSetValue inputFieldSelectionSetValue = null;
		Long id = inputFieldSelectionSetValueInVO.getId();
		if (id != null) {
			inputFieldSelectionSetValue = this.load(id);
		}
		if (inputFieldSelectionSetValue == null) {
			inputFieldSelectionSetValue = InputFieldSelectionSetValue.Factory.newInstance();
		}
		return inputFieldSelectionSetValue;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InputFieldSelectionSetValue loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueJsonVO(InputFieldSelectionSetValueJsonVO inputFieldSelectionSetValueJsonVO) {
		throw new UnsupportedOperationException(
				"org.phoenixctms.ctsms.domain.loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueJsonVO(InputFieldSelectionSetValueJsonVO) not yet implemented.");
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InputFieldSelectionSetValue loadInputFieldSelectionSetValueFromInputFieldSelectionSetValueOutVO(InputFieldSelectionSetValueOutVO inputFieldSelectionSetValueOutVO) {
		throw new UnsupportedOperationException("out value object to recursive entity not supported");
	}

	private InputFieldSelectionSetValue loadInputFieldSelectionSetValueFromLightInputFieldSelectionSetValueOutVO(
			LightInputFieldSelectionSetValueOutVO lightInputFieldSelectionSetValueOutVO) {
		throw new UnsupportedOperationException(
				"org.phoenixctms.ctsms.domain.loadInputFieldSelectionSetValueFromLightInputFieldSelectionSetValueOutVO(LightInputFieldSelectionSetValueOutVO) not yet implemented.");
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValueInVO toInputFieldSelectionSetValueInVO(final InputFieldSelectionSetValue entity) {
		return super.toInputFieldSelectionSetValueInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInputFieldSelectionSetValueInVO(
			InputFieldSelectionSetValue source,
			InputFieldSelectionSetValueInVO target) {
		super.toInputFieldSelectionSetValueInVO(source, target);
		InputField field = source.getField();
		if (field != null) {
			target.setFieldId(field.getId());
		}
		target.setName(source.getNameL10nKey());
		target.setInkRegions(source.getInkRegion());
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValueJsonVO toInputFieldSelectionSetValueJsonVO(final InputFieldSelectionSetValue entity) {
		return super.toInputFieldSelectionSetValueJsonVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInputFieldSelectionSetValueJsonVO(
			InputFieldSelectionSetValue source,
			InputFieldSelectionSetValueJsonVO target) {
		super.toInputFieldSelectionSetValueJsonVO(source, target);
		if (source.isLocalized()) {
			target.setName(L10nUtil.getInputFieldSelectionSetValueName(Locales.USER, source.getNameL10nKey()));
		} else {
			target.setName(source.getNameL10nKey());
		}
		if (ServiceUtil.isInputFieldType(source.getField(), InputFieldType.SKETCH)) {
			target.setInkRegions(source.getInkRegion());
		} else {
			target.setInkRegions(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InputFieldSelectionSetValueOutVO toInputFieldSelectionSetValueOutVO(final InputFieldSelectionSetValue entity) {
		return super.toInputFieldSelectionSetValueOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInputFieldSelectionSetValueOutVO(
			InputFieldSelectionSetValue source,
			InputFieldSelectionSetValueOutVO target) {
		(new InputFieldSelectionSetValueGraph(this, this.getInputFieldDao(), this.getUserDao())).toVOHelper(source, target, new HashMap<Class, HashMap<Long, Object>>());
	}

	@Override
	public void toInputFieldSelectionSetValueOutVO(
			InputFieldSelectionSetValue source,
			InputFieldSelectionSetValueOutVO target, HashMap<Class, HashMap<Long, Object>> voMap) {
		(new InputFieldSelectionSetValueGraph(this, this.getInputFieldDao(), this.getUserDao())).toVOHelper(source, target, voMap);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public LightInputFieldSelectionSetValueOutVO toLightInputFieldSelectionSetValueOutVO(final InputFieldSelectionSetValue entity) {
		return super.toLightInputFieldSelectionSetValueOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toLightInputFieldSelectionSetValueOutVO(
			InputFieldSelectionSetValue source,
			LightInputFieldSelectionSetValueOutVO target) {
		super.toLightInputFieldSelectionSetValueOutVO(source, target);
		if (source.isLocalized()) {
			target.setName(L10nUtil.getInputFieldSelectionSetValueName(Locales.USER, source.getNameL10nKey()));
		} else {
			target.setName(source.getNameL10nKey());
		}
		InputField field = source.getField();
		target.setUniqueName(InputFieldSelectionSetValueGraph.getUniqueInputFieldSelectionSetValueName(field, target.getName()));
	}
}