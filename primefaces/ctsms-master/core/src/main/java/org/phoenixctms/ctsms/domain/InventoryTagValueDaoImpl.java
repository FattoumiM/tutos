// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.InventoryOutVO;
import org.phoenixctms.ctsms.vo.InventoryTagVO;
import org.phoenixctms.ctsms.vo.InventoryTagValueInVO;
import org.phoenixctms.ctsms.vo.InventoryTagValueOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see InventoryTagValue
 */
public class InventoryTagValueDaoImpl
		extends InventoryTagValueDaoBase {

	private org.hibernate.Criteria createTagValueCriteria() {
		org.hibernate.Criteria tagValueCriteria = this.getSession().createCriteria(InventoryTagValue.class);
		return tagValueCriteria;
	}

	@Override
	protected Collection<InventoryTagValue> handleFindByInventory(
			Long inventoryId, PSFVO psf) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(InventoryTagValue.class, tagValueCriteria);
		if (inventoryId != null) {
			tagValueCriteria.add(Restrictions.eq("inventory.id", inventoryId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return tagValueCriteria.list();
	}

	@Override
	protected long handleGetCount(
			Long inventoryId) throws Exception {
		org.hibernate.Criteria tagValueCriteria = createTagValueCriteria();
		if (inventoryId != null) {
			tagValueCriteria.add(Restrictions.eq("inventory.id", inventoryId.longValue()));
		}
		return (Long) tagValueCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InventoryTagValue inventoryTagValueInVOToEntity(InventoryTagValueInVO inventoryTagValueInVO) {
		InventoryTagValue entity = this.loadInventoryTagValueFromInventoryTagValueInVO(inventoryTagValueInVO);
		this.inventoryTagValueInVOToEntity(inventoryTagValueInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inventoryTagValueInVOToEntity(
			InventoryTagValueInVO source,
			InventoryTagValue target,
			boolean copyIfNull) {
		super.inventoryTagValueInVOToEntity(source, target, copyIfNull);
		Long tagId = source.getTagId();
		Long inventoryId = source.getInventoryId();
		if (tagId != null) {
			target.setTag(this.getInventoryTagDao().load(tagId));
		} else if (copyIfNull) {
			target.setTag(null);
		}
		if (inventoryId != null) {
			Inventory inventory = this.getInventoryDao().load(inventoryId);
			target.setInventory(inventory);
			inventory.addTagValues(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeTagValues(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InventoryTagValue inventoryTagValueOutVOToEntity(InventoryTagValueOutVO inventoryTagValueOutVO) {
		InventoryTagValue entity = this.loadInventoryTagValueFromInventoryTagValueOutVO(inventoryTagValueOutVO);
		this.inventoryTagValueOutVOToEntity(inventoryTagValueOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void inventoryTagValueOutVOToEntity(
			InventoryTagValueOutVO source,
			InventoryTagValue target,
			boolean copyIfNull) {
		super.inventoryTagValueOutVOToEntity(source, target, copyIfNull);
		InventoryTagVO tagVO = source.getTag();
		InventoryOutVO inventoryVO = source.getInventory();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (tagVO != null) {
			target.setTag(this.getInventoryTagDao().inventoryTagVOToEntity(tagVO));
		} else if (copyIfNull) {
			target.setTag(null);
		}
		if (inventoryVO != null) {
			Inventory inventory = this.getInventoryDao().inventoryOutVOToEntity(inventoryVO);
			target.setInventory(inventory);
			inventory.addTagValues(target);
		} else if (copyIfNull) {
			Inventory inventory = target.getInventory();
			target.setInventory(null);
			if (inventory != null) {
				inventory.removeTagValues(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InventoryTagValue loadInventoryTagValueFromInventoryTagValueInVO(InventoryTagValueInVO inventoryTagValueInVO) {
		InventoryTagValue inventoryTagValue = null;
		Long id = inventoryTagValueInVO.getId();
		if (id != null) {
			inventoryTagValue = this.load(id);
		}
		if (inventoryTagValue == null) {
			inventoryTagValue = InventoryTagValue.Factory.newInstance();
		}
		return inventoryTagValue;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private InventoryTagValue loadInventoryTagValueFromInventoryTagValueOutVO(InventoryTagValueOutVO inventoryTagValueOutVO) {
		InventoryTagValue inventoryTagValue = this.load(inventoryTagValueOutVO.getId());
		if (inventoryTagValue == null) {
			inventoryTagValue = InventoryTagValue.Factory.newInstance();
		}
		return inventoryTagValue;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InventoryTagValueInVO toInventoryTagValueInVO(final InventoryTagValue entity) {
		return super.toInventoryTagValueInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInventoryTagValueInVO(
			InventoryTagValue source,
			InventoryTagValueInVO target) {
		super.toInventoryTagValueInVO(source, target);
		InventoryTag tag = source.getTag();
		Inventory inventory = source.getInventory();
		if (tag != null) {
			target.setTagId(tag.getId());
		}
		if (inventory != null) {
			target.setInventoryId(inventory.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public InventoryTagValueOutVO toInventoryTagValueOutVO(final InventoryTagValue entity) {
		return super.toInventoryTagValueOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toInventoryTagValueOutVO(
			InventoryTagValue source,
			InventoryTagValueOutVO target) {
		super.toInventoryTagValueOutVO(source, target);
		InventoryTag tag = source.getTag();
		Inventory inventory = source.getInventory();
		User modifiedUser = source.getModifiedUser();
		if (tag != null) {
			target.setTag(this.getInventoryTagDao().toInventoryTagVO(tag));
		}
		if (inventory != null) {
			target.setInventory(this.getInventoryDao().toInventoryOutVO(inventory));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
	}
}