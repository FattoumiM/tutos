// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;

import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.security.CipherText;
import org.phoenixctms.ctsms.security.CryptoUtil;
import org.phoenixctms.ctsms.security.reencrypt.FieldReEncrypter;
import org.phoenixctms.ctsms.security.reencrypt.ReEncrypter;
import org.phoenixctms.ctsms.util.CoreUtil;
import org.phoenixctms.ctsms.vo.AlphaIdVO;
import org.phoenixctms.ctsms.vo.DiagnosisInVO;
import org.phoenixctms.ctsms.vo.DiagnosisOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;

/**
 * @see Diagnosis
 */
public class DiagnosisDaoImpl
		extends DiagnosisDaoBase {

	private static final String DIAGNOSIS_NAME = "{0} ({1})";

	private static final String getDiagnosisName(DiagnosisOutVO diagnosis) {
		if (diagnosis != null) {
			AlphaIdVO alphaIdVO = diagnosis.getCode();
			if (alphaIdVO != null) {
				return MessageFormat.format(DIAGNOSIS_NAME, alphaIdVO.getText(), alphaIdVO.getCode());
			}
		}
		return null;
	}

	private final static Collection<ReEncrypter<Diagnosis>> RE_ENCRYPTERS = new ArrayList<ReEncrypter<Diagnosis>>();
	static {
		RE_ENCRYPTERS.add(new FieldReEncrypter<Diagnosis>() {

			@Override
			protected byte[] getIv(Diagnosis item) {
				return item.getCommentIv();
			}

			@Override
			protected byte[] getEncrypted(Diagnosis item) {
				return item.getEncryptedComment();
			}

			@Override
			protected void setIv(Diagnosis item, byte[] iv) {
				item.setCommentIv(iv);
			}

			@Override
			protected void setEncrypted(Diagnosis item, byte[] cipherText) {
				item.setEncryptedComment(cipherText);
			}

			@Override
			protected void setHash(Diagnosis item, byte[] hash) {
				item.setCommentHash(hash);
			}
		});
	}

	@Override
	protected Collection<ReEncrypter<Diagnosis>> getReEncrypters() {
		return RE_ENCRYPTERS;
	}

	private org.hibernate.Criteria createDiagnosisCriteria() {
		org.hibernate.Criteria diagnosisCriteria = this.getSession().createCriteria(Diagnosis.class);
		return diagnosisCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Diagnosis diagnosisInVOToEntity(DiagnosisInVO diagnosisInVO) {
		Diagnosis entity = this.loadDiagnosisFromDiagnosisInVO(diagnosisInVO);
		this.diagnosisInVOToEntity(diagnosisInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void diagnosisInVOToEntity(
			DiagnosisInVO source,
			Diagnosis target,
			boolean copyIfNull) {
		super.diagnosisInVOToEntity(source, target, copyIfNull);
		Long codeId = source.getCodeId();
		Long probandId = source.getProbandId();
		if (codeId != null) {
			AlphaId alphaId = this.getAlphaIdDao().load(codeId);
			target.setCode(alphaId);
			alphaId.addDiagnoses(target);
		} else if (copyIfNull) {
			AlphaId alphaId = target.getCode();
			target.setCode(null);
			if (alphaId != null) {
				alphaId.removeDiagnoses(target);
			}
		}
		if (probandId != null) {
			Proband proband = this.getProbandDao().load(probandId);
			target.setProband(proband);
			proband.addDiagnoses(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeDiagnoses(target);
			}
		}
		try {
			if (copyIfNull || source.getComment() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getComment());
				target.setCommentIv(cipherText.getIv());
				target.setEncryptedComment(cipherText.getCipherText());
				target.setCommentHash(CryptoUtil.hashForSearch(source.getComment()));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Diagnosis diagnosisOutVOToEntity(DiagnosisOutVO diagnosisOutVO) {
		Diagnosis entity = this.loadDiagnosisFromDiagnosisOutVO(diagnosisOutVO);
		this.diagnosisOutVOToEntity(diagnosisOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void diagnosisOutVOToEntity(
			DiagnosisOutVO source,
			Diagnosis target,
			boolean copyIfNull) {
		super.diagnosisOutVOToEntity(source, target, copyIfNull);
		AlphaIdVO codeVO = source.getCode();
		ProbandOutVO probandVO = source.getProband();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (codeVO != null) {
			AlphaId alphaId = this.getAlphaIdDao().alphaIdVOToEntity(codeVO);
			target.setCode(alphaId);
			alphaId.addDiagnoses(target);
		} else if (copyIfNull) {
			AlphaId alphaId = target.getCode();
			target.setCode(null);
			if (alphaId != null) {
				alphaId.removeDiagnoses(target);
			}
		}
		if (probandVO != null) {
			Proband proband = this.getProbandDao().probandOutVOToEntity(probandVO);
			target.setProband(proband);
			proband.addDiagnoses(target);
		} else if (copyIfNull) {
			Proband proband = target.getProband();
			target.setProband(null);
			if (proband != null) {
				proband.removeDiagnoses(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		try {
			if (copyIfNull || source.getComment() != null) {
				CipherText cipherText = CryptoUtil.encryptValue(source.getComment());
				target.setCommentIv(cipherText.getIv());
				target.setEncryptedComment(cipherText.getCipherText());
				target.setCommentHash(CryptoUtil.hashForSearch(source.getComment()));
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @throws Exception
	 * @inheritDoc
	 */
	@Override
	protected Collection<Diagnosis> handleFindByProband(Long probandId, PSFVO psf) throws Exception {
		org.hibernate.Criteria diagnosisCriteria = createDiagnosisCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Diagnosis.class, diagnosisCriteria);
		if (probandId != null) {
			diagnosisCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return diagnosisCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<Diagnosis> handleFindCollidingProbandCodeInterval(Long probandId, Long codeId, Timestamp from, Timestamp to) {
		org.hibernate.Criteria diagnosisCriteria = createDiagnosisCriteria();
		if (from != null) {
			diagnosisCriteria.add(Restrictions.isNotNull("start"));
			CriteriaUtil.applyStopOptionalIntervalCriterion(diagnosisCriteria, from, to, null, true);
		} else { // saved records without start stop
			diagnosisCriteria.add(Restrictions.isNull("start"));
		}
		diagnosisCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		if (codeId != null) {
			diagnosisCriteria.add(Restrictions.eq("code.id", codeId.longValue()));
		}
		return diagnosisCriteria.list();
	}

	@Override
	protected long handleGetCount(Long probandId) throws Exception {
		org.hibernate.Criteria diagnosisCriteria = createDiagnosisCriteria();
		if (probandId != null) {
			diagnosisCriteria.add(Restrictions.eq("proband.id", probandId.longValue()));
		}
		return (Long) diagnosisCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Diagnosis loadDiagnosisFromDiagnosisInVO(DiagnosisInVO diagnosisInVO) {
		Long id = diagnosisInVO.getId();
		Diagnosis diagnosis = null;
		if (id != null) {
			diagnosis = this.load(id);
		}
		if (diagnosis == null) {
			diagnosis = Diagnosis.Factory.newInstance();
		}
		return diagnosis;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Diagnosis loadDiagnosisFromDiagnosisOutVO(DiagnosisOutVO diagnosisOutVO) {
		Diagnosis diagnosis = this.load(diagnosisOutVO.getId());
		if (diagnosis == null) {
			diagnosis = Diagnosis.Factory.newInstance();
		}
		return diagnosis;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public DiagnosisInVO toDiagnosisInVO(final Diagnosis entity) {
		return super.toDiagnosisInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toDiagnosisInVO(
			Diagnosis source,
			DiagnosisInVO target) {
		super.toDiagnosisInVO(source, target);
		AlphaId code = source.getCode();
		Proband proband = source.getProband();
		if (code != null) {
			target.setCodeId(code.getId());
		}
		if (proband != null) {
			target.setProbandId(proband.getId());
		}
		try {
			target.setComment((String) CryptoUtil.decryptValue(source.getCommentIv(), source.getEncryptedComment()));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public DiagnosisOutVO toDiagnosisOutVO(final Diagnosis entity) {
		return super.toDiagnosisOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toDiagnosisOutVO(
			Diagnosis source,
			DiagnosisOutVO target) {
		super.toDiagnosisOutVO(source, target);
		AlphaId code = source.getCode();
		Proband proband = source.getProband();
		User modifiedUser = source.getModifiedUser();
		if (code != null) {
			target.setCode(this.getAlphaIdDao().toAlphaIdVO(code));
		}
		if (proband != null) {
			target.setProband(this.getProbandDao().toProbandOutVO(proband));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		try {
			if (!CoreUtil.isPassDecryption()) {
				throw new Exception();
			}
			target.setComment((String) CryptoUtil.decryptValue(source.getCommentIv(), source.getEncryptedComment()));
			target.setDecrypted(true);
		} catch (Exception e) {
			target.setComment(null);
			target.setDecrypted(false);
		}
		target.setName(getDiagnosisName(target));
	}
}