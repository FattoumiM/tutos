// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.TrialTagVO;

/**
 * @see TrialTag
 */
public class TrialTagDaoImpl
		extends TrialTagDaoBase {

	private org.hibernate.Criteria createTrialTagCriteria() {
		org.hibernate.Criteria trialTagCriteria = this.getSession().createCriteria(TrialTag.class);
		trialTagCriteria.setCacheable(true);
		return trialTagCriteria;
	}

	@Override
	protected Collection<TrialTag> handleFindByNotifyMissing(
			Boolean notifyMissing) throws Exception {
		org.hibernate.Criteria tagCriteria = createTrialTagCriteria();
		if (notifyMissing != null) {
			tagCriteria.add(Restrictions.eq("notifyMissing", notifyMissing.booleanValue()));
		}
		return tagCriteria.list();
	}

	@Override
	protected Collection<TrialTag> handleFindByVisibleIdExcelPayoffs(Boolean visible,
			Long tagId, Boolean excel, Boolean payoffs) throws Exception {
		org.hibernate.Criteria tagCriteria = createTrialTagCriteria();
		if (excel != null) {
			tagCriteria.add(Restrictions.eq("excel", excel.booleanValue()));
		}
		if (payoffs != null) {
			tagCriteria.add(Restrictions.eq("payoffs", payoffs.booleanValue()));
		}
		CriteriaUtil.applyVisibleIdCriterion("visible", tagCriteria, visible, tagId);
		return tagCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private TrialTag loadTrialTagFromTrialTagVO(TrialTagVO trialTagVO) {
		TrialTag trialTag = null;
		Long id = trialTagVO.getId();
		if (id != null) {
			trialTag = this.load(id);
		}
		if (trialTag == null) {
			trialTag = TrialTag.Factory.newInstance();
		}
		return trialTag;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TrialTagVO toTrialTagVO(final TrialTag entity) {
		return super.toTrialTagVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toTrialTagVO(
			TrialTag source,
			TrialTagVO target) {
		super.toTrialTagVO(source, target);
		target.setName(L10nUtil.getTrialTagName(Locales.USER, source.getNameL10nKey()));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TrialTag trialTagVOToEntity(TrialTagVO trialTagVO) {
		TrialTag entity = this.loadTrialTagFromTrialTagVO(trialTagVO);
		this.trialTagVOToEntity(trialTagVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void trialTagVOToEntity(
			TrialTagVO source,
			TrialTag target,
			boolean copyIfNull) {
		super.trialTagVOToEntity(source, target, copyIfNull);
	}
}