// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;

import org.phoenixctms.ctsms.enumeration.HyperlinkModule;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.HyperlinkCategoryVO;

/**
 * @see HyperlinkCategory
 */
public class HyperlinkCategoryDaoImpl
		extends HyperlinkCategoryDaoBase {

	@Override
	protected Collection<HyperlinkCategory> handleFindByModuleVisibleId(
			HyperlinkModule module, Boolean visible, Long criteriaId) throws Exception {
		org.hibernate.Criteria categoryCriteria = this.getSession().createCriteria(HyperlinkCategory.class);
		categoryCriteria.setCacheable(true);
		if (module != null) {
			categoryCriteria.add(Restrictions.eq("module", module));
		}
		CriteriaUtil.applyVisibleIdCriterion("visible", categoryCriteria, visible, criteriaId);
		return categoryCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public HyperlinkCategory hyperlinkCategoryVOToEntity(HyperlinkCategoryVO hyperlinkCategoryVO) {
		HyperlinkCategory entity = this.loadHyperlinkCategoryFromHyperlinkCategoryVO(hyperlinkCategoryVO);
		this.hyperlinkCategoryVOToEntity(hyperlinkCategoryVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void hyperlinkCategoryVOToEntity(
			HyperlinkCategoryVO source,
			HyperlinkCategory target,
			boolean copyIfNull) {
		super.hyperlinkCategoryVOToEntity(source, target, copyIfNull);
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private HyperlinkCategory loadHyperlinkCategoryFromHyperlinkCategoryVO(HyperlinkCategoryVO hyperlinkCategoryVO) {
		HyperlinkCategory hyperlinkCategory = null;
		Long id = hyperlinkCategoryVO.getId();
		if (id != null) {
			hyperlinkCategory = this.load(id);
		}
		if (hyperlinkCategory == null) {
			hyperlinkCategory = HyperlinkCategory.Factory.newInstance();
		}
		return hyperlinkCategory;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public HyperlinkCategoryVO toHyperlinkCategoryVO(final HyperlinkCategory entity) {
		return super.toHyperlinkCategoryVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toHyperlinkCategoryVO(
			HyperlinkCategory source,
			HyperlinkCategoryVO target) {
		super.toHyperlinkCategoryVO(source, target);
		target.setName(L10nUtil.getHyperlinkCategoryName(Locales.USER, source.getNameL10nKey()));
		target.setTitlePreset(L10nUtil.getHyperlinkTitlePreset(Locales.USER, source.getTitlePresetL10nKey()));
	}
}