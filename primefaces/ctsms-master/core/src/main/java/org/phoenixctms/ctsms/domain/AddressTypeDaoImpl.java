// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.AddressTypeVO;

/**
 * @see AddressType
 */
public class AddressTypeDaoImpl
		extends AddressTypeDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	public AddressType addressTypeVOToEntity(AddressTypeVO addressTypeVO) {
		AddressType entity = this.loadAddressTypeFromAddressTypeVO(addressTypeVO);
		this.addressTypeVOToEntity(addressTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void addressTypeVOToEntity(
			AddressTypeVO source,
			AddressType target,
			boolean copyIfNull) {
		super.addressTypeVOToEntity(source, target, copyIfNull);
	}

	@Override
	protected Collection<AddressType> handleFindByStaffProbandAnimalId(Boolean staff,
			Boolean proband, Boolean animal, Long typeId) throws Exception {
		org.hibernate.Criteria typeCriteria = this.getSession().createCriteria(AddressType.class);
		typeCriteria.setCacheable(true);
		if (staff != null) {
			if (typeId != null) {
				typeCriteria.add(Restrictions.or(Restrictions.eq("staff", staff.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				typeCriteria.add(Restrictions.eq("staff", staff.booleanValue()));
			}
		}
		if (proband != null) {
			if (typeId != null) {
				typeCriteria.add(Restrictions.or(Restrictions.eq("proband", proband.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				typeCriteria.add(Restrictions.eq("proband", proband.booleanValue()));
			}
		}
		if (animal != null) {
			if (typeId != null) {
				typeCriteria.add(Restrictions.or(Restrictions.eq("animal", animal.booleanValue()), Restrictions.idEq(typeId.longValue())));
			} else {
				typeCriteria.add(Restrictions.eq("animal", animal.booleanValue()));
			}
		}
		return typeCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private AddressType loadAddressTypeFromAddressTypeVO(AddressTypeVO addressTypeVO) {
		AddressType addressType = null;
		Long id = addressTypeVO.getId();
		if (id != null) {
			addressType = this.load(id);
		}
		if (addressType == null) {
			addressType = AddressType.Factory.newInstance();
		}
		return addressType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public AddressTypeVO toAddressTypeVO(final AddressType entity) {
		return super.toAddressTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toAddressTypeVO(
			AddressType source,
			AddressTypeVO target) {
		super.toAddressTypeVO(source, target);
		target.setName(L10nUtil.getAddressTypeName(Locales.USER, source.getNameL10nKey()));
	}
}