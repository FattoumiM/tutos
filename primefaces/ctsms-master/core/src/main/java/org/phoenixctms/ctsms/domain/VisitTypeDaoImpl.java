// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;

import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.VisitTypeVO;

/**
 * @see VisitType
 */
public class VisitTypeDaoImpl
		extends VisitTypeDaoBase {

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<VisitType> handleFindByVisibleId(Boolean visible, Long typeId) {
		org.hibernate.Criteria typeCriteria = this.getSession().createCriteria(VisitType.class);
		typeCriteria.setCacheable(true);
		CriteriaUtil.applyVisibleIdCriterion("visible", typeCriteria, visible, typeId);
		return typeCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private VisitType loadVisitTypeFromVisitTypeVO(VisitTypeVO visitTypeVO) {
		VisitType visitType = null;
		Long id = visitTypeVO.getId();
		if (id != null) {
			visitType = this.load(id);
		}
		if (visitType == null) {
			visitType = VisitType.Factory.newInstance();
		}
		return visitType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public VisitTypeVO toVisitTypeVO(final VisitType entity) {
		return super.toVisitTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toVisitTypeVO(
			VisitType source,
			VisitTypeVO target) {
		super.toVisitTypeVO(source, target);
		target.setName(L10nUtil.getVisitTypeName(Locales.USER, source.getNameL10nKey()));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public VisitType visitTypeVOToEntity(VisitTypeVO visitTypeVO) {
		VisitType entity = this.loadVisitTypeFromVisitTypeVO(visitTypeVO);
		this.visitTypeVOToEntity(visitTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void visitTypeVOToEntity(
			VisitTypeVO source,
			VisitType target,
			boolean copyIfNull) {
		super.visitTypeVOToEntity(source, target, copyIfNull);
	}
}